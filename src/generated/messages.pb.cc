// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace muas {
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.altitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR Orientation::Orientation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrientationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrientationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrientationDefaultTypeInternal() {}
  union {
    Orientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrientationDefaultTypeInternal _Orientation_default_instance_;
PROTOBUF_CONSTEXPR MissionItem::MissionItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_sys_)*/0
  , /*decltype(_impl_.target_comp_)*/0
  , /*decltype(_impl_.seq_)*/0
  , /*decltype(_impl_.frame_)*/0
  , /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_.current_)*/false
  , /*decltype(_impl_.autocontinue_)*/false
  , /*decltype(_impl_.param1_)*/0
  , /*decltype(_impl_.param2_)*/0
  , /*decltype(_impl_.param3_)*/0
  , /*decltype(_impl_.param4_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MissionItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MissionItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MissionItemDefaultTypeInternal() {}
  union {
    MissionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MissionItemDefaultTypeInternal _MissionItem_default_instance_;
PROTOBUF_CONSTEXPR MissionInfo::MissionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_items_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MissionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MissionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MissionInfoDefaultTypeInternal() {}
  union {
    MissionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MissionInfoDefaultTypeInternal _MissionInfo_default_instance_;
PROTOBUF_CONSTEXPR Sensor::Sensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_namespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDefaultTypeInternal() {}
  union {
    Sensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDefaultTypeInternal _Sensor_default_instance_;
PROTOBUF_CONSTEXPR NDNSF_Response::NDNSF_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0} {}
struct NDNSF_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NDNSF_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NDNSF_ResponseDefaultTypeInternal() {}
  union {
    NDNSF_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NDNSF_ResponseDefaultTypeInternal _NDNSF_Response_default_instance_;
PROTOBUF_CONSTEXPR Entity_Echo_Request::Entity_Echo_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_sent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Entity_Echo_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_Echo_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_Echo_RequestDefaultTypeInternal() {}
  union {
    Entity_Echo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_Echo_RequestDefaultTypeInternal _Entity_Echo_Request_default_instance_;
PROTOBUF_CONSTEXPR Entity_Echo_Response::Entity_Echo_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_received_)*/nullptr
  , /*decltype(_impl_.time_response_sent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Entity_Echo_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_Echo_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_Echo_ResponseDefaultTypeInternal() {}
  union {
    Entity_Echo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_Echo_ResponseDefaultTypeInternal _Entity_Echo_Response_default_instance_;
PROTOBUF_CONSTEXPR Entity_GetEntityInfo_Request::Entity_GetEntityInfo_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.key_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Entity_GetEntityInfo_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_GetEntityInfo_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_GetEntityInfo_RequestDefaultTypeInternal() {}
  union {
    Entity_GetEntityInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_GetEntityInfo_RequestDefaultTypeInternal _Entity_GetEntityInfo_Request_default_instance_;
PROTOBUF_CONSTEXPR Entity_GetEntityInfo_Response::Entity_GetEntityInfo_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Entity_GetEntityInfo_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_GetEntityInfo_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_GetEntityInfo_ResponseDefaultTypeInternal() {}
  union {
    Entity_GetEntityInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_GetEntityInfo_ResponseDefaultTypeInternal _Entity_GetEntityInfo_Response_default_instance_;
PROTOBUF_CONSTEXPR Entity_GetPosition_Request::Entity_GetPosition_Request(
    ::_pbi::ConstantInitialized) {}
struct Entity_GetPosition_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_GetPosition_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_GetPosition_RequestDefaultTypeInternal() {}
  union {
    Entity_GetPosition_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_GetPosition_RequestDefaultTypeInternal _Entity_GetPosition_Request_default_instance_;
PROTOBUF_CONSTEXPR Entity_GetPosition_Response::Entity_GetPosition_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Entity_GetPosition_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_GetPosition_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_GetPosition_ResponseDefaultTypeInternal() {}
  union {
    Entity_GetPosition_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_GetPosition_ResponseDefaultTypeInternal _Entity_GetPosition_Response_default_instance_;
PROTOBUF_CONSTEXPR Entity_GetOrientation_Request::Entity_GetOrientation_Request(
    ::_pbi::ConstantInitialized) {}
struct Entity_GetOrientation_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_GetOrientation_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_GetOrientation_RequestDefaultTypeInternal() {}
  union {
    Entity_GetOrientation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_GetOrientation_RequestDefaultTypeInternal _Entity_GetOrientation_Request_default_instance_;
PROTOBUF_CONSTEXPR Entity_GetOrientation_Response::Entity_GetOrientation_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.attitude_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Entity_GetOrientation_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Entity_GetOrientation_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Entity_GetOrientation_ResponseDefaultTypeInternal() {}
  union {
    Entity_GetOrientation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Entity_GetOrientation_ResponseDefaultTypeInternal _Entity_GetOrientation_Response_default_instance_;
PROTOBUF_CONSTEXPR Admin_Test_Request::Admin_Test_Request(
    ::_pbi::ConstantInitialized) {}
struct Admin_Test_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Admin_Test_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Admin_Test_RequestDefaultTypeInternal() {}
  union {
    Admin_Test_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Admin_Test_RequestDefaultTypeInternal _Admin_Test_Request_default_instance_;
PROTOBUF_CONSTEXPR Admin_Test_Response::Admin_Test_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Admin_Test_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Admin_Test_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Admin_Test_ResponseDefaultTypeInternal() {}
  union {
    Admin_Test_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Admin_Test_ResponseDefaultTypeInternal _Admin_Test_Response_default_instance_;
PROTOBUF_CONSTEXPR WUAS_QuadRaster_Request::WUAS_QuadRaster_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nw_coord_)*/nullptr
  , /*decltype(_impl_.se_coord_)*/nullptr
  , /*decltype(_impl_.alt_)*/0
  , /*decltype(_impl_.passes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WUAS_QuadRaster_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WUAS_QuadRaster_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WUAS_QuadRaster_RequestDefaultTypeInternal() {}
  union {
    WUAS_QuadRaster_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WUAS_QuadRaster_RequestDefaultTypeInternal _WUAS_QuadRaster_Request_default_instance_;
PROTOBUF_CONSTEXPR WUAS_QuadRaster_Response::WUAS_QuadRaster_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WUAS_QuadRaster_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WUAS_QuadRaster_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WUAS_QuadRaster_ResponseDefaultTypeInternal() {}
  union {
    WUAS_QuadRaster_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WUAS_QuadRaster_ResponseDefaultTypeInternal _WUAS_QuadRaster_Response_default_instance_;
PROTOBUF_CONSTEXPR IUAS_PointOrbit_Request::IUAS_PointOrbit_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_sent_)*/nullptr
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IUAS_PointOrbit_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IUAS_PointOrbit_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IUAS_PointOrbit_RequestDefaultTypeInternal() {}
  union {
    IUAS_PointOrbit_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IUAS_PointOrbit_RequestDefaultTypeInternal _IUAS_PointOrbit_Request_default_instance_;
PROTOBUF_CONSTEXPR IUAS_PointOrbit_Response::IUAS_PointOrbit_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_received_)*/nullptr
  , /*decltype(_impl_.time_response_sent_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IUAS_PointOrbit_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IUAS_PointOrbit_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IUAS_PointOrbit_ResponseDefaultTypeInternal() {}
  union {
    IUAS_PointOrbit_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IUAS_PointOrbit_ResponseDefaultTypeInternal _IUAS_PointOrbit_Response_default_instance_;
PROTOBUF_CONSTEXPR IUAS_PointHover_Request::IUAS_PointHover_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IUAS_PointHover_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IUAS_PointHover_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IUAS_PointHover_RequestDefaultTypeInternal() {}
  union {
    IUAS_PointHover_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IUAS_PointHover_RequestDefaultTypeInternal _IUAS_PointHover_Request_default_instance_;
PROTOBUF_CONSTEXPR IUAS_PointHover_Response::IUAS_PointHover_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IUAS_PointHover_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IUAS_PointHover_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IUAS_PointHover_ResponseDefaultTypeInternal() {}
  union {
    IUAS_PointHover_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IUAS_PointHover_ResponseDefaultTypeInternal _IUAS_PointHover_Response_default_instance_;
PROTOBUF_CONSTEXPR Mission_GetMissionInfo_Request::Mission_GetMissionInfo_Request(
    ::_pbi::ConstantInitialized) {}
struct Mission_GetMissionInfo_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_GetMissionInfo_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_GetMissionInfo_RequestDefaultTypeInternal() {}
  union {
    Mission_GetMissionInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_GetMissionInfo_RequestDefaultTypeInternal _Mission_GetMissionInfo_Request_default_instance_;
PROTOBUF_CONSTEXPR Mission_GetMissionInfo_Response::Mission_GetMissionInfo_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_GetMissionInfo_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_GetMissionInfo_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_GetMissionInfo_ResponseDefaultTypeInternal() {}
  union {
    Mission_GetMissionInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_GetMissionInfo_ResponseDefaultTypeInternal _Mission_GetMissionInfo_Response_default_instance_;
PROTOBUF_CONSTEXPR Mission_GetItem_Request::Mission_GetItem_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.idx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_GetItem_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_GetItem_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_GetItem_RequestDefaultTypeInternal() {}
  union {
    Mission_GetItem_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_GetItem_RequestDefaultTypeInternal _Mission_GetItem_Request_default_instance_;
PROTOBUF_CONSTEXPR Mission_GetItem_Response::Mission_GetItem_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_GetItem_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_GetItem_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_GetItem_ResponseDefaultTypeInternal() {}
  union {
    Mission_GetItem_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_GetItem_ResponseDefaultTypeInternal _Mission_GetItem_Response_default_instance_;
PROTOBUF_CONSTEXPR Mission_SetItem_Request::Mission_SetItem_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.idx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_SetItem_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_SetItem_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_SetItem_RequestDefaultTypeInternal() {}
  union {
    Mission_SetItem_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_SetItem_RequestDefaultTypeInternal _Mission_SetItem_Request_default_instance_;
PROTOBUF_CONSTEXPR Mission_SetItem_Response::Mission_SetItem_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_SetItem_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_SetItem_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_SetItem_ResponseDefaultTypeInternal() {}
  union {
    Mission_SetItem_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_SetItem_ResponseDefaultTypeInternal _Mission_SetItem_Response_default_instance_;
PROTOBUF_CONSTEXPR Mission_Clear_Request::Mission_Clear_Request(
    ::_pbi::ConstantInitialized) {}
struct Mission_Clear_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Clear_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Clear_RequestDefaultTypeInternal() {}
  union {
    Mission_Clear_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Clear_RequestDefaultTypeInternal _Mission_Clear_Request_default_instance_;
PROTOBUF_CONSTEXPR Mission_Clear_Response::Mission_Clear_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_Clear_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Clear_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Clear_ResponseDefaultTypeInternal() {}
  union {
    Mission_Clear_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Clear_ResponseDefaultTypeInternal _Mission_Clear_Response_default_instance_;
PROTOBUF_CONSTEXPR Mission_Start_Request::Mission_Start_Request(
    ::_pbi::ConstantInitialized) {}
struct Mission_Start_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Start_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Start_RequestDefaultTypeInternal() {}
  union {
    Mission_Start_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Start_RequestDefaultTypeInternal _Mission_Start_Request_default_instance_;
PROTOBUF_CONSTEXPR Mission_Start_Response::Mission_Start_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_Start_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Start_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Start_ResponseDefaultTypeInternal() {}
  union {
    Mission_Start_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Start_ResponseDefaultTypeInternal _Mission_Start_Response_default_instance_;
PROTOBUF_CONSTEXPR Mission_Pause_Request::Mission_Pause_Request(
    ::_pbi::ConstantInitialized) {}
struct Mission_Pause_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Pause_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Pause_RequestDefaultTypeInternal() {}
  union {
    Mission_Pause_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Pause_RequestDefaultTypeInternal _Mission_Pause_Request_default_instance_;
PROTOBUF_CONSTEXPR Mission_Pause_Response::Mission_Pause_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_Pause_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Pause_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Pause_ResponseDefaultTypeInternal() {}
  union {
    Mission_Pause_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Pause_ResponseDefaultTypeInternal _Mission_Pause_Response_default_instance_;
PROTOBUF_CONSTEXPR Mission_Continue_Request::Mission_Continue_Request(
    ::_pbi::ConstantInitialized) {}
struct Mission_Continue_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Continue_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Continue_RequestDefaultTypeInternal() {}
  union {
    Mission_Continue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Continue_RequestDefaultTypeInternal _Mission_Continue_Request_default_instance_;
PROTOBUF_CONSTEXPR Mission_Continue_Response::Mission_Continue_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_Continue_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Continue_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Continue_ResponseDefaultTypeInternal() {}
  union {
    Mission_Continue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Continue_ResponseDefaultTypeInternal _Mission_Continue_Response_default_instance_;
PROTOBUF_CONSTEXPR Mission_Terminate_Request::Mission_Terminate_Request(
    ::_pbi::ConstantInitialized) {}
struct Mission_Terminate_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Terminate_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Terminate_RequestDefaultTypeInternal() {}
  union {
    Mission_Terminate_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Terminate_RequestDefaultTypeInternal _Mission_Terminate_Request_default_instance_;
PROTOBUF_CONSTEXPR Mission_Terminate_Response::Mission_Terminate_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Mission_Terminate_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mission_Terminate_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mission_Terminate_ResponseDefaultTypeInternal() {}
  union {
    Mission_Terminate_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mission_Terminate_ResponseDefaultTypeInternal _Mission_Terminate_Response_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_SwitchMode_Request::FlightCtrl_SwitchMode_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_SwitchMode_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_SwitchMode_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_SwitchMode_RequestDefaultTypeInternal() {}
  union {
    FlightCtrl_SwitchMode_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_SwitchMode_RequestDefaultTypeInternal _FlightCtrl_SwitchMode_Request_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_SwitchMode_Response::FlightCtrl_SwitchMode_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_SwitchMode_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_SwitchMode_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_SwitchMode_ResponseDefaultTypeInternal() {}
  union {
    FlightCtrl_SwitchMode_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_SwitchMode_ResponseDefaultTypeInternal _FlightCtrl_SwitchMode_Response_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_Takeoff_Request::FlightCtrl_Takeoff_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_sent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_Takeoff_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_Takeoff_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_Takeoff_RequestDefaultTypeInternal() {}
  union {
    FlightCtrl_Takeoff_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_Takeoff_RequestDefaultTypeInternal _FlightCtrl_Takeoff_Request_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_Takeoff_Response::FlightCtrl_Takeoff_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_received_)*/nullptr
  , /*decltype(_impl_.time_response_sent_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_Takeoff_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_Takeoff_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_Takeoff_ResponseDefaultTypeInternal() {}
  union {
    FlightCtrl_Takeoff_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_Takeoff_ResponseDefaultTypeInternal _FlightCtrl_Takeoff_Response_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_Land_Request::FlightCtrl_Land_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_sent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_Land_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_Land_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_Land_RequestDefaultTypeInternal() {}
  union {
    FlightCtrl_Land_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_Land_RequestDefaultTypeInternal _FlightCtrl_Land_Request_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_Land_Response::FlightCtrl_Land_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_received_)*/nullptr
  , /*decltype(_impl_.time_response_sent_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_Land_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_Land_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_Land_ResponseDefaultTypeInternal() {}
  union {
    FlightCtrl_Land_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_Land_ResponseDefaultTypeInternal _FlightCtrl_Land_Response_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_RTL_Request::FlightCtrl_RTL_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_sent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_RTL_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_RTL_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_RTL_RequestDefaultTypeInternal() {}
  union {
    FlightCtrl_RTL_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_RTL_RequestDefaultTypeInternal _FlightCtrl_RTL_Request_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_RTL_Response::FlightCtrl_RTL_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_received_)*/nullptr
  , /*decltype(_impl_.time_response_sent_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_RTL_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_RTL_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_RTL_ResponseDefaultTypeInternal() {}
  union {
    FlightCtrl_RTL_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_RTL_ResponseDefaultTypeInternal _FlightCtrl_RTL_Response_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_Kill_Request::FlightCtrl_Kill_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_sent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_Kill_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_Kill_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_Kill_RequestDefaultTypeInternal() {}
  union {
    FlightCtrl_Kill_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_Kill_RequestDefaultTypeInternal _FlightCtrl_Kill_Request_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_Kill_Response::FlightCtrl_Kill_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_received_)*/nullptr
  , /*decltype(_impl_.time_response_sent_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_Kill_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_Kill_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_Kill_ResponseDefaultTypeInternal() {}
  union {
    FlightCtrl_Kill_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_Kill_ResponseDefaultTypeInternal _FlightCtrl_Kill_Response_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_SetSpeed_Request::FlightCtrl_SetSpeed_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_SetSpeed_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_SetSpeed_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_SetSpeed_RequestDefaultTypeInternal() {}
  union {
    FlightCtrl_SetSpeed_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_SetSpeed_RequestDefaultTypeInternal _FlightCtrl_SetSpeed_Request_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_SetSpeed_Response::FlightCtrl_SetSpeed_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_SetSpeed_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_SetSpeed_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_SetSpeed_ResponseDefaultTypeInternal() {}
  union {
    FlightCtrl_SetSpeed_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_SetSpeed_ResponseDefaultTypeInternal _FlightCtrl_SetSpeed_Response_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_Reposition_Request::FlightCtrl_Reposition_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_Reposition_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_Reposition_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_Reposition_RequestDefaultTypeInternal() {}
  union {
    FlightCtrl_Reposition_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_Reposition_RequestDefaultTypeInternal _FlightCtrl_Reposition_Request_default_instance_;
PROTOBUF_CONSTEXPR FlightCtrl_Reposition_Response::FlightCtrl_Reposition_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightCtrl_Reposition_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightCtrl_Reposition_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightCtrl_Reposition_ResponseDefaultTypeInternal() {}
  union {
    FlightCtrl_Reposition_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightCtrl_Reposition_ResponseDefaultTypeInternal _FlightCtrl_Reposition_Response_default_instance_;
PROTOBUF_CONSTEXPR MAVLink_Generic_Request::MAVLink_Generic_Request(
    ::_pbi::ConstantInitialized) {}
struct MAVLink_Generic_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAVLink_Generic_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAVLink_Generic_RequestDefaultTypeInternal() {}
  union {
    MAVLink_Generic_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAVLink_Generic_RequestDefaultTypeInternal _MAVLink_Generic_Request_default_instance_;
PROTOBUF_CONSTEXPR MAVLink_Generic_Response::MAVLink_Generic_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mav_response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr} {}
struct MAVLink_Generic_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MAVLink_Generic_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MAVLink_Generic_ResponseDefaultTypeInternal() {}
  union {
    MAVLink_Generic_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MAVLink_Generic_ResponseDefaultTypeInternal _MAVLink_Generic_Response_default_instance_;
PROTOBUF_CONSTEXPR SensorCtrl_GetSensorInfo_Request::SensorCtrl_GetSensorInfo_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_sent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorCtrl_GetSensorInfo_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorCtrl_GetSensorInfo_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorCtrl_GetSensorInfo_RequestDefaultTypeInternal() {}
  union {
    SensorCtrl_GetSensorInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorCtrl_GetSensorInfo_RequestDefaultTypeInternal _SensorCtrl_GetSensorInfo_Request_default_instance_;
PROTOBUF_CONSTEXPR SensorCtrl_GetSensorInfo_Response::SensorCtrl_GetSensorInfo_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sensors_)*/{}
  , /*decltype(_impl_.time_request_received_)*/nullptr
  , /*decltype(_impl_.time_response_sent_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorCtrl_GetSensorInfo_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorCtrl_GetSensorInfo_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorCtrl_GetSensorInfo_ResponseDefaultTypeInternal() {}
  union {
    SensorCtrl_GetSensorInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorCtrl_GetSensorInfo_ResponseDefaultTypeInternal _SensorCtrl_GetSensorInfo_Response_default_instance_;
PROTOBUF_CONSTEXPR SensorCtrl_CaptureSingle_Request::SensorCtrl_CaptureSingle_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_request_sent_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorCtrl_CaptureSingle_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorCtrl_CaptureSingle_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorCtrl_CaptureSingle_RequestDefaultTypeInternal() {}
  union {
    SensorCtrl_CaptureSingle_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorCtrl_CaptureSingle_RequestDefaultTypeInternal _SensorCtrl_CaptureSingle_Request_default_instance_;
PROTOBUF_CONSTEXPR SensorCtrl_CaptureSingle_Response::SensorCtrl_CaptureSingle_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.capture_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_request_received_)*/nullptr
  , /*decltype(_impl_.time_response_sent_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorCtrl_CaptureSingle_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorCtrl_CaptureSingle_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorCtrl_CaptureSingle_ResponseDefaultTypeInternal() {}
  union {
    SensorCtrl_CaptureSingle_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorCtrl_CaptureSingle_ResponseDefaultTypeInternal _SensorCtrl_CaptureSingle_Response_default_instance_;
PROTOBUF_CONSTEXPR SensorCtrl_CapturePeriodic_Request::SensorCtrl_CapturePeriodic_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interval_sec_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorCtrl_CapturePeriodic_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorCtrl_CapturePeriodic_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorCtrl_CapturePeriodic_RequestDefaultTypeInternal() {}
  union {
    SensorCtrl_CapturePeriodic_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorCtrl_CapturePeriodic_RequestDefaultTypeInternal _SensorCtrl_CapturePeriodic_Request_default_instance_;
PROTOBUF_CONSTEXPR SensorCtrl_CapturePeriodic_Response::SensorCtrl_CapturePeriodic_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.capture_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorCtrl_CapturePeriodic_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorCtrl_CapturePeriodic_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorCtrl_CapturePeriodic_ResponseDefaultTypeInternal() {}
  union {
    SensorCtrl_CapturePeriodic_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorCtrl_CapturePeriodic_ResponseDefaultTypeInternal _SensorCtrl_CapturePeriodic_Response_default_instance_;
}  // namespace muas
static ::_pb::Metadata file_level_metadata_messages_2eproto[60];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Position, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::muas::Position, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::muas::Position, _impl_.altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Orientation, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::muas::Orientation, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::muas::Orientation, _impl_.roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.target_sys_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.target_comp_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.frame_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.current_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.autocontinue_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.param1_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.param2_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.param3_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.param4_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::muas::MissionItem, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::MissionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::MissionInfo, _impl_.num_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Sensor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::muas::Sensor, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::muas::Sensor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::muas::Sensor, _impl_.data_namespace_),
  PROTOBUF_FIELD_OFFSET(::muas::NDNSF_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::muas::NDNSF_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::NDNSF_Response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::muas::NDNSF_Response, _impl_.msg_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_Echo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_Echo_Request, _impl_.time_request_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_Echo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_Echo_Response, _impl_.time_request_received_),
  PROTOBUF_FIELD_OFFSET(::muas::Entity_Echo_Response, _impl_.time_response_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetEntityInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetEntityInfo_Request, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetEntityInfo_Request, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetEntityInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetEntityInfo_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetEntityInfo_Response, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetPosition_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetPosition_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetPosition_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetPosition_Response, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetOrientation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetOrientation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetOrientation_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::Entity_GetOrientation_Response, _impl_.attitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Admin_Test_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Admin_Test_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Admin_Test_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::Admin_Test_Response, _impl_.reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::WUAS_QuadRaster_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::WUAS_QuadRaster_Request, _impl_.nw_coord_),
  PROTOBUF_FIELD_OFFSET(::muas::WUAS_QuadRaster_Request, _impl_.se_coord_),
  PROTOBUF_FIELD_OFFSET(::muas::WUAS_QuadRaster_Request, _impl_.alt_),
  PROTOBUF_FIELD_OFFSET(::muas::WUAS_QuadRaster_Request, _impl_.passes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::WUAS_QuadRaster_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::WUAS_QuadRaster_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointOrbit_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointOrbit_Request, _impl_.time_request_sent_),
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointOrbit_Request, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointOrbit_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointOrbit_Response, _impl_.time_request_received_),
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointOrbit_Response, _impl_.time_response_sent_),
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointOrbit_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointHover_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointHover_Request, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointHover_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::IUAS_PointHover_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetMissionInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetMissionInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetMissionInfo_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetMissionInfo_Response, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetItem_Request, _impl_.idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetItem_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetItem_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::Mission_GetItem_Response, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_SetItem_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_SetItem_Request, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::muas::Mission_SetItem_Request, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_SetItem_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_SetItem_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Clear_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Clear_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Clear_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Start_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Start_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Start_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Pause_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Pause_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Pause_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Continue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Continue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Continue_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Terminate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Terminate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::Mission_Terminate_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_SwitchMode_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_SwitchMode_Request, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_SwitchMode_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_SwitchMode_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Takeoff_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Takeoff_Request, _impl_.time_request_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Takeoff_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Takeoff_Response, _impl_.time_request_received_),
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Takeoff_Response, _impl_.time_response_sent_),
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Takeoff_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Land_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Land_Request, _impl_.time_request_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Land_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Land_Response, _impl_.time_request_received_),
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Land_Response, _impl_.time_response_sent_),
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Land_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_RTL_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_RTL_Request, _impl_.time_request_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_RTL_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_RTL_Response, _impl_.time_request_received_),
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_RTL_Response, _impl_.time_response_sent_),
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_RTL_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Kill_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Kill_Request, _impl_.time_request_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Kill_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Kill_Response, _impl_.time_request_received_),
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Kill_Response, _impl_.time_response_sent_),
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Kill_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_SetSpeed_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_SetSpeed_Request, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_SetSpeed_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_SetSpeed_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Reposition_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Reposition_Request, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Reposition_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::FlightCtrl_Reposition_Response, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::MAVLink_Generic_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::MAVLink_Generic_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::muas::MAVLink_Generic_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::MAVLink_Generic_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::MAVLink_Generic_Response, _impl_.mav_response_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_GetSensorInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_GetSensorInfo_Request, _impl_.time_request_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_GetSensorInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_GetSensorInfo_Response, _impl_.time_request_received_),
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_GetSensorInfo_Response, _impl_.time_response_sent_),
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_GetSensorInfo_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_GetSensorInfo_Response, _impl_.sensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CaptureSingle_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CaptureSingle_Request, _impl_.time_request_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CaptureSingle_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CaptureSingle_Response, _impl_.time_request_received_),
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CaptureSingle_Response, _impl_.time_response_sent_),
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CaptureSingle_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CaptureSingle_Response, _impl_.capture_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CapturePeriodic_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CapturePeriodic_Request, _impl_.interval_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CapturePeriodic_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CapturePeriodic_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::muas::SensorCtrl_CapturePeriodic_Response, _impl_.capture_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::muas::Position)},
  { 9, -1, -1, sizeof(::muas::Orientation)},
  { 18, -1, -1, sizeof(::muas::MissionItem)},
  { 38, -1, -1, sizeof(::muas::MissionInfo)},
  { 45, -1, -1, sizeof(::muas::Sensor)},
  { 55, 63, -1, sizeof(::muas::NDNSF_Response)},
  { 65, -1, -1, sizeof(::muas::Entity_Echo_Request)},
  { 72, -1, -1, sizeof(::muas::Entity_Echo_Response)},
  { 80, -1, -1, sizeof(::muas::Entity_GetEntityInfo_Request)},
  { 88, -1, -1, sizeof(::muas::Entity_GetEntityInfo_Response)},
  { 96, -1, -1, sizeof(::muas::Entity_GetPosition_Request)},
  { 102, -1, -1, sizeof(::muas::Entity_GetPosition_Response)},
  { 110, -1, -1, sizeof(::muas::Entity_GetOrientation_Request)},
  { 116, -1, -1, sizeof(::muas::Entity_GetOrientation_Response)},
  { 124, -1, -1, sizeof(::muas::Admin_Test_Request)},
  { 130, -1, -1, sizeof(::muas::Admin_Test_Response)},
  { 138, -1, -1, sizeof(::muas::WUAS_QuadRaster_Request)},
  { 148, -1, -1, sizeof(::muas::WUAS_QuadRaster_Response)},
  { 155, -1, -1, sizeof(::muas::IUAS_PointOrbit_Request)},
  { 163, -1, -1, sizeof(::muas::IUAS_PointOrbit_Response)},
  { 172, -1, -1, sizeof(::muas::IUAS_PointHover_Request)},
  { 179, -1, -1, sizeof(::muas::IUAS_PointHover_Response)},
  { 186, -1, -1, sizeof(::muas::Mission_GetMissionInfo_Request)},
  { 192, -1, -1, sizeof(::muas::Mission_GetMissionInfo_Response)},
  { 200, -1, -1, sizeof(::muas::Mission_GetItem_Request)},
  { 207, -1, -1, sizeof(::muas::Mission_GetItem_Response)},
  { 215, -1, -1, sizeof(::muas::Mission_SetItem_Request)},
  { 223, -1, -1, sizeof(::muas::Mission_SetItem_Response)},
  { 230, -1, -1, sizeof(::muas::Mission_Clear_Request)},
  { 236, -1, -1, sizeof(::muas::Mission_Clear_Response)},
  { 243, -1, -1, sizeof(::muas::Mission_Start_Request)},
  { 249, -1, -1, sizeof(::muas::Mission_Start_Response)},
  { 256, -1, -1, sizeof(::muas::Mission_Pause_Request)},
  { 262, -1, -1, sizeof(::muas::Mission_Pause_Response)},
  { 269, -1, -1, sizeof(::muas::Mission_Continue_Request)},
  { 275, -1, -1, sizeof(::muas::Mission_Continue_Response)},
  { 282, -1, -1, sizeof(::muas::Mission_Terminate_Request)},
  { 288, -1, -1, sizeof(::muas::Mission_Terminate_Response)},
  { 295, -1, -1, sizeof(::muas::FlightCtrl_SwitchMode_Request)},
  { 302, -1, -1, sizeof(::muas::FlightCtrl_SwitchMode_Response)},
  { 309, -1, -1, sizeof(::muas::FlightCtrl_Takeoff_Request)},
  { 316, -1, -1, sizeof(::muas::FlightCtrl_Takeoff_Response)},
  { 325, -1, -1, sizeof(::muas::FlightCtrl_Land_Request)},
  { 332, -1, -1, sizeof(::muas::FlightCtrl_Land_Response)},
  { 341, -1, -1, sizeof(::muas::FlightCtrl_RTL_Request)},
  { 348, -1, -1, sizeof(::muas::FlightCtrl_RTL_Response)},
  { 357, -1, -1, sizeof(::muas::FlightCtrl_Kill_Request)},
  { 364, -1, -1, sizeof(::muas::FlightCtrl_Kill_Response)},
  { 373, -1, -1, sizeof(::muas::FlightCtrl_SetSpeed_Request)},
  { 380, -1, -1, sizeof(::muas::FlightCtrl_SetSpeed_Response)},
  { 387, -1, -1, sizeof(::muas::FlightCtrl_Reposition_Request)},
  { 394, -1, -1, sizeof(::muas::FlightCtrl_Reposition_Response)},
  { 401, -1, -1, sizeof(::muas::MAVLink_Generic_Request)},
  { 407, 415, -1, sizeof(::muas::MAVLink_Generic_Response)},
  { 417, -1, -1, sizeof(::muas::SensorCtrl_GetSensorInfo_Request)},
  { 424, -1, -1, sizeof(::muas::SensorCtrl_GetSensorInfo_Response)},
  { 434, -1, -1, sizeof(::muas::SensorCtrl_CaptureSingle_Request)},
  { 441, -1, -1, sizeof(::muas::SensorCtrl_CaptureSingle_Response)},
  { 451, -1, -1, sizeof(::muas::SensorCtrl_CapturePeriodic_Request)},
  { 458, -1, -1, sizeof(::muas::SensorCtrl_CapturePeriodic_Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::muas::_Position_default_instance_._instance,
  &::muas::_Orientation_default_instance_._instance,
  &::muas::_MissionItem_default_instance_._instance,
  &::muas::_MissionInfo_default_instance_._instance,
  &::muas::_Sensor_default_instance_._instance,
  &::muas::_NDNSF_Response_default_instance_._instance,
  &::muas::_Entity_Echo_Request_default_instance_._instance,
  &::muas::_Entity_Echo_Response_default_instance_._instance,
  &::muas::_Entity_GetEntityInfo_Request_default_instance_._instance,
  &::muas::_Entity_GetEntityInfo_Response_default_instance_._instance,
  &::muas::_Entity_GetPosition_Request_default_instance_._instance,
  &::muas::_Entity_GetPosition_Response_default_instance_._instance,
  &::muas::_Entity_GetOrientation_Request_default_instance_._instance,
  &::muas::_Entity_GetOrientation_Response_default_instance_._instance,
  &::muas::_Admin_Test_Request_default_instance_._instance,
  &::muas::_Admin_Test_Response_default_instance_._instance,
  &::muas::_WUAS_QuadRaster_Request_default_instance_._instance,
  &::muas::_WUAS_QuadRaster_Response_default_instance_._instance,
  &::muas::_IUAS_PointOrbit_Request_default_instance_._instance,
  &::muas::_IUAS_PointOrbit_Response_default_instance_._instance,
  &::muas::_IUAS_PointHover_Request_default_instance_._instance,
  &::muas::_IUAS_PointHover_Response_default_instance_._instance,
  &::muas::_Mission_GetMissionInfo_Request_default_instance_._instance,
  &::muas::_Mission_GetMissionInfo_Response_default_instance_._instance,
  &::muas::_Mission_GetItem_Request_default_instance_._instance,
  &::muas::_Mission_GetItem_Response_default_instance_._instance,
  &::muas::_Mission_SetItem_Request_default_instance_._instance,
  &::muas::_Mission_SetItem_Response_default_instance_._instance,
  &::muas::_Mission_Clear_Request_default_instance_._instance,
  &::muas::_Mission_Clear_Response_default_instance_._instance,
  &::muas::_Mission_Start_Request_default_instance_._instance,
  &::muas::_Mission_Start_Response_default_instance_._instance,
  &::muas::_Mission_Pause_Request_default_instance_._instance,
  &::muas::_Mission_Pause_Response_default_instance_._instance,
  &::muas::_Mission_Continue_Request_default_instance_._instance,
  &::muas::_Mission_Continue_Response_default_instance_._instance,
  &::muas::_Mission_Terminate_Request_default_instance_._instance,
  &::muas::_Mission_Terminate_Response_default_instance_._instance,
  &::muas::_FlightCtrl_SwitchMode_Request_default_instance_._instance,
  &::muas::_FlightCtrl_SwitchMode_Response_default_instance_._instance,
  &::muas::_FlightCtrl_Takeoff_Request_default_instance_._instance,
  &::muas::_FlightCtrl_Takeoff_Response_default_instance_._instance,
  &::muas::_FlightCtrl_Land_Request_default_instance_._instance,
  &::muas::_FlightCtrl_Land_Response_default_instance_._instance,
  &::muas::_FlightCtrl_RTL_Request_default_instance_._instance,
  &::muas::_FlightCtrl_RTL_Response_default_instance_._instance,
  &::muas::_FlightCtrl_Kill_Request_default_instance_._instance,
  &::muas::_FlightCtrl_Kill_Response_default_instance_._instance,
  &::muas::_FlightCtrl_SetSpeed_Request_default_instance_._instance,
  &::muas::_FlightCtrl_SetSpeed_Response_default_instance_._instance,
  &::muas::_FlightCtrl_Reposition_Request_default_instance_._instance,
  &::muas::_FlightCtrl_Reposition_Response_default_instance_._instance,
  &::muas::_MAVLink_Generic_Request_default_instance_._instance,
  &::muas::_MAVLink_Generic_Response_default_instance_._instance,
  &::muas::_SensorCtrl_GetSensorInfo_Request_default_instance_._instance,
  &::muas::_SensorCtrl_GetSensorInfo_Response_default_instance_._instance,
  &::muas::_SensorCtrl_CaptureSingle_Request_default_instance_._instance,
  &::muas::_SensorCtrl_CaptureSingle_Response_default_instance_._instance,
  &::muas::_SensorCtrl_CapturePeriodic_Request_default_instance_._instance,
  &::muas::_SensorCtrl_CapturePeriodic_Response_default_instance_._instance,
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\004muas\032\037google/protobuf/"
  "timestamp.proto\"A\n\010Position\022\020\n\010latitude\030"
  "\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\022\020\n\010altitude\030\003 \001"
  "(\002\"7\n\013Orientation\022\013\n\003yaw\030\001 \001(\002\022\r\n\005pitch\030"
  "\002 \001(\002\022\014\n\004roll\030\003 \001(\002\"\347\005\n\013MissionItem\022\022\n\nt"
  "arget_sys\030\001 \001(\005\022\023\n\013target_comp\030\002 \001(\005\022\013\n\003"
  "seq\030\003 \001(\005\022&\n\005frame\030\004 \001(\0162\027.muas.MissionI"
  "tem.Frame\022&\n\003cmd\030\005 \001(\0162\031.muas.MissionIte"
  "m.MAV_CMD\022\017\n\007current\030\006 \001(\010\022\024\n\014autocontin"
  "ue\030\007 \001(\010\022\016\n\006param1\030\010 \001(\002\022\016\n\006param2\030\t \001(\002"
  "\022\016\n\006param3\030\n \001(\002\022\016\n\006param4\030\013 \001(\002\022\t\n\001x\030\014 "
  "\001(\005\022\t\n\001y\030\r \001(\005\022\t\n\001z\030\016 \001(\005\"R\n\005Frame\022\021\n\rUN"
  "KNOWN_FRAME\020\000\022\n\n\006GLOBAL\020\001\022\020\n\014RELATIVE_AL"
  "T\020\002\022\017\n\013TERRAIN_ALT\020\003\022\007\n\003INT\020\004\"\365\002\n\007MAV_CM"
  "D\022\017\n\013UNKNOWN_CMD\020\000\022\020\n\014NAV_WAYPOINT\020\001\022\030\n\024"
  "NAV_RETURN_TO_LAUNCH\020\002\022\014\n\010NAV_LAND\020\003\022\017\n\013"
  "NAV_TAKEOFF\020\004\022\022\n\016NAV_LAND_LOCAL\020\005\022\025\n\021NAV"
  "_TAKEOFF_LOCAL\020\006\022\r\n\tDO_FOLLOW\020\007\022\030\n\024DO_FO"
  "LLOW_REPOSITION\020\010\022\014\n\010DO_ORBIT\020\t\022\030\n\024DO_FL"
  "IGHTTERMINATION\020\n\022\026\n\022DO_CHANGE_ALTITUDE\020"
  "\013\022\030\n\024DO_RETURN_PATH_START\020\014\022\021\n\rDO_LAND_S"
  "TART\020\r\022\021\n\rDO_RALLY_LAND\020\016\022\020\n\014DO_GO_AROUN"
  "D\020\017\022\021\n\rDO_REPOSITION\020\020\022\025\n\021DO_PAUSE_CONTI"
  "NUE\020\021\" \n\013MissionInfo\022\021\n\tnum_items\030\001 \001(\005\""
  "\305\001\n\006Sensor\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022%\n\004"
  "type\030\003 \001(\0162\027.muas.Sensor.SensorType\022\026\n\016d"
  "ata_namespace\030\004 \001(\t\"b\n\nSensorType\022\022\n\016UNK"
  "NOWN_SENSOR\020\000\022\021\n\rMULTISPECTRAL\020\001\022\021\n\rHYPE"
  "RSPECTRAL\020\002\022\014\n\010ACOUSTIC\020\003\022\014\n\010MAGNETIC\020\004\""
  "\227\001\n\016NDNSF_Response\0220\n\004code\030\001 \001(\0162\".muas."
  "NDNSF_Response.miniMUAS_Code\022\020\n\003msg\030\002 \001("
  "\tH\000\210\001\001\"9\n\rminiMUAS_Code\022\020\n\014UNKNOWN_CODE\020"
  "\000\022\013\n\007SUCCESS\020\001\022\t\n\005ERROR\020\002B\006\n\004_msg\"L\n\023Ent"
  "ity_Echo_Request\0225\n\021time_request_sent\030\001 "
  "\001(\0132\032.google.protobuf.Timestamp\"\211\001\n\024Enti"
  "ty_Echo_Response\0229\n\025time_request_receive"
  "d\030\001 \001(\0132\032.google.protobuf.Timestamp\0226\n\022t"
  "ime_response_sent\030\002 \001(\0132\032.google.protobu"
  "f.Timestamp\"S\n\034Entity_GetEntityInfo_Requ"
  "est\022&\n\010response\030\001 \001(\0132\024.muas.NDNSF_Respo"
  "nse\022\013\n\003key\030\002 \001(\005\"V\n\035Entity_GetEntityInfo"
  "_Response\022&\n\010response\030\001 \001(\0132\024.muas.NDNSF"
  "_Response\022\r\n\005value\030\002 \001(\t\"\034\n\032Entity_GetPo"
  "sition_Request\"b\n\033Entity_GetPosition_Res"
  "ponse\022&\n\010response\030\001 \001(\0132\024.muas.NDNSF_Res"
  "ponse\022\033\n\003pos\030\002 \001(\0132\016.muas.Position\"\037\n\035En"
  "tity_GetOrientation_Request\"m\n\036Entity_Ge"
  "tOrientation_Response\022&\n\010response\030\001 \001(\0132"
  "\024.muas.NDNSF_Response\022#\n\010attitude\030\002 \001(\0132"
  "\021.muas.Orientation\"\024\n\022Admin_Test_Request"
  "\"L\n\023Admin_Test_Response\022&\n\010response\030\001 \001("
  "\0132\024.muas.NDNSF_Response\022\r\n\005reply\030\002 \001(\t\"z"
  "\n\027WUAS_QuadRaster_Request\022 \n\010nw_coord\030\001 "
  "\001(\0132\016.muas.Position\022 \n\010se_coord\030\002 \001(\0132\016."
  "muas.Position\022\013\n\003alt\030\003 \001(\002\022\016\n\006passes\030\004 \001"
  "(\005\"B\n\030WUAS_QuadRaster_Response\022&\n\010respon"
  "se\030\001 \001(\0132\024.muas.NDNSF_Response\"p\n\027IUAS_P"
  "ointOrbit_Request\0225\n\021time_request_sent\030\001"
  " \001(\0132\032.google.protobuf.Timestamp\022\036\n\006targ"
  "et\030\002 \001(\0132\016.muas.Position\"\265\001\n\030IUAS_PointO"
  "rbit_Response\0229\n\025time_request_received\030\001"
  " \001(\0132\032.google.protobuf.Timestamp\0226\n\022time"
  "_response_sent\030\002 \001(\0132\032.google.protobuf.T"
  "imestamp\022&\n\010response\030\003 \001(\0132\024.muas.NDNSF_"
  "Response\"6\n\027IUAS_PointHover_Request\022\033\n\003p"
  "os\030\001 \001(\0132\016.muas.Position\"B\n\030IUAS_PointHo"
  "ver_Response\022&\n\010response\030\001 \001(\0132\024.muas.ND"
  "NSF_Response\" \n\036Mission_GetMissionInfo_R"
  "equest\"j\n\037Mission_GetMissionInfo_Respons"
  "e\022&\n\010response\030\001 \001(\0132\024.muas.NDNSF_Respons"
  "e\022\037\n\004info\030\002 \001(\0132\021.muas.MissionInfo\"&\n\027Mi"
  "ssion_GetItem_Request\022\013\n\003idx\030\001 \001(\005\"c\n\030Mi"
  "ssion_GetItem_Response\022&\n\010response\030\001 \001(\013"
  "2\024.muas.NDNSF_Response\022\037\n\004item\030\002 \001(\0132\021.m"
  "uas.MissionItem\"G\n\027Mission_SetItem_Reque"
  "st\022\013\n\003idx\030\001 \001(\005\022\037\n\004item\030\002 \001(\0132\021.muas.Mis"
  "sionItem\"B\n\030Mission_SetItem_Response\022&\n\010"
  "response\030\001 \001(\0132\024.muas.NDNSF_Response\"\027\n\025"
  "Mission_Clear_Request\"@\n\026Mission_Clear_R"
  "esponse\022&\n\010response\030\001 \001(\0132\024.muas.NDNSF_R"
  "esponse\"\027\n\025Mission_Start_Request\"@\n\026Miss"
  "ion_Start_Response\022&\n\010response\030\001 \001(\0132\024.m"
  "uas.NDNSF_Response\"\027\n\025Mission_Pause_Requ"
  "est\"@\n\026Mission_Pause_Response\022&\n\010respons"
  "e\030\001 \001(\0132\024.muas.NDNSF_Response\"\032\n\030Mission"
  "_Continue_Request\"C\n\031Mission_Continue_Re"
  "sponse\022&\n\010response\030\001 \001(\0132\024.muas.NDNSF_Re"
  "sponse\"\033\n\031Mission_Terminate_Request\"D\n\032M"
  "ission_Terminate_Response\022&\n\010response\030\001 "
  "\001(\0132\024.muas.NDNSF_Response\"\255\001\n\035FlightCtrl"
  "_SwitchMode_Request\022<\n\004mode\030\001 \001(\0162..muas"
  ".FlightCtrl_SwitchMode_Request.FlightMod"
  "e\"N\n\nFlightMode\022\013\n\007UNKNOWN\020\000\022\r\n\tSTABILIZ"
  "E\020\001\022\014\n\010ALT_HOLD\020\002\022\n\n\006LOITER\020\003\022\n\n\006GUIDED\020"
  "\004\"H\n\036FlightCtrl_SwitchMode_Response\022&\n\010r"
  "esponse\030\001 \001(\0132\024.muas.NDNSF_Response\"S\n\032F"
  "lightCtrl_Takeoff_Request\0225\n\021time_reques"
  "t_sent\030\001 \001(\0132\032.google.protobuf.Timestamp"
  "\"\270\001\n\033FlightCtrl_Takeoff_Response\0229\n\025time"
  "_request_received\030\001 \001(\0132\032.google.protobu"
  "f.Timestamp\0226\n\022time_response_sent\030\002 \001(\0132"
  "\032.google.protobuf.Timestamp\022&\n\010response\030"
  "\003 \001(\0132\024.muas.NDNSF_Response\"P\n\027FlightCtr"
  "l_Land_Request\0225\n\021time_request_sent\030\001 \001("
  "\0132\032.google.protobuf.Timestamp\"\265\001\n\030Flight"
  "Ctrl_Land_Response\0229\n\025time_request_recei"
  "ved\030\001 \001(\0132\032.google.protobuf.Timestamp\0226\n"
  "\022time_response_sent\030\002 \001(\0132\032.google.proto"
  "buf.Timestamp\022&\n\010response\030\003 \001(\0132\024.muas.N"
  "DNSF_Response\"O\n\026FlightCtrl_RTL_Request\022"
  "5\n\021time_request_sent\030\001 \001(\0132\032.google.prot"
  "obuf.Timestamp\"\264\001\n\027FlightCtrl_RTL_Respon"
  "se\0229\n\025time_request_received\030\001 \001(\0132\032.goog"
  "le.protobuf.Timestamp\0226\n\022time_response_s"
  "ent\030\002 \001(\0132\032.google.protobuf.Timestamp\022&\n"
  "\010response\030\003 \001(\0132\024.muas.NDNSF_Response\"P\n"
  "\027FlightCtrl_Kill_Request\0225\n\021time_request"
  "_sent\030\001 \001(\0132\032.google.protobuf.Timestamp\""
  "\265\001\n\030FlightCtrl_Kill_Response\0229\n\025time_req"
  "uest_received\030\001 \001(\0132\032.google.protobuf.Ti"
  "mestamp\0226\n\022time_response_sent\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022&\n\010response\030\003 \001("
  "\0132\024.muas.NDNSF_Response\",\n\033FlightCtrl_Se"
  "tSpeed_Request\022\r\n\005speed\030\001 \001(\005\"F\n\034FlightC"
  "trl_SetSpeed_Response\022&\n\010response\030\001 \001(\0132"
  "\024.muas.NDNSF_Response\"<\n\035FlightCtrl_Repo"
  "sition_Request\022\033\n\003pos\030\001 \001(\0132\016.muas.Posit"
  "ion\"H\n\036FlightCtrl_Reposition_Response\022&\n"
  "\010response\030\001 \001(\0132\024.muas.NDNSF_Response\"\031\n"
  "\027MAVLink_Generic_Request\"n\n\030MAVLink_Gene"
  "ric_Response\022&\n\010response\030\001 \001(\0132\024.muas.ND"
  "NSF_Response\022\031\n\014mav_response\030\002 \001(\tH\000\210\001\001B"
  "\017\n\r_mav_response\"Y\n SensorCtrl_GetSensor"
  "Info_Request\0225\n\021time_request_sent\030\001 \001(\0132"
  "\032.google.protobuf.Timestamp\"\335\001\n!SensorCt"
  "rl_GetSensorInfo_Response\0229\n\025time_reques"
  "t_received\030\001 \001(\0132\032.google.protobuf.Times"
  "tamp\0226\n\022time_response_sent\030\002 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022&\n\010response\030\003 \001(\0132\024"
  ".muas.NDNSF_Response\022\035\n\007sensors\030\004 \003(\0132\014."
  "muas.Sensor\"Y\n SensorCtrl_CaptureSingle_"
  "Request\0225\n\021time_request_sent\030\001 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\"\322\001\n!SensorCtrl_Ca"
  "ptureSingle_Response\0229\n\025time_request_rec"
  "eived\030\001 \001(\0132\032.google.protobuf.Timestamp\022"
  "6\n\022time_response_sent\030\002 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022&\n\010response\030\003 \001(\0132\024.muas"
  ".NDNSF_Response\022\022\n\ncapture_id\030\004 \001(\t\":\n\"S"
  "ensorCtrl_CapturePeriodic_Request\022\024\n\014int"
  "erval_sec\030\001 \001(\005\"a\n#SensorCtrl_CapturePer"
  "iodic_Response\022&\n\010response\030\001 \001(\0132\024.muas."
  "NDNSF_Response\022\022\n\ncapture_id\030\002 \001(\t*;\n\nEn"
  "tityType\022\007\n\003ALL\020\000\022\007\n\003GCS\020\001\022\007\n\003UAS\020\002\022\010\n\004I"
  "UAS\020\003\022\010\n\004WUAS\020\004*\207\002\n\007MAV_MSG\022\017\n\013UNKNOWN_M"
  "SG\020\000\022\r\n\tHEARTBEAT\020\001\022\016\n\nSYS_STATUS\020\002\022\017\n\013S"
  "YSTEM_TIME\020\003\022\017\n\013GPS_RAW_INT\020\004\022\016\n\nGPS_STA"
  "TUS\020\005\022\016\n\nSCALED_IMU\020\006\022\013\n\007RAW_IMU\020\007\022\020\n\014RA"
  "W_PRESSURE\020\010\022\023\n\017SCALED_PRESSURE\020\t\022\014\n\010ATT"
  "ITUDE\020\n\022\027\n\023ATTITUDE_QUATERNION\020\013\022\026\n\022LOCA"
  "L_POSITION_NED\020\014\022\027\n\023GLOBAL_POSITION_INT\020"
  "\rb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_messages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false, false, 6409, descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_deps, 1, 60,
    schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
    file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace muas {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionItem_Frame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool MissionItem_Frame_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MissionItem_Frame MissionItem::UNKNOWN_FRAME;
constexpr MissionItem_Frame MissionItem::GLOBAL;
constexpr MissionItem_Frame MissionItem::RELATIVE_ALT;
constexpr MissionItem_Frame MissionItem::TERRAIN_ALT;
constexpr MissionItem_Frame MissionItem::INT;
constexpr MissionItem_Frame MissionItem::Frame_MIN;
constexpr MissionItem_Frame MissionItem::Frame_MAX;
constexpr int MissionItem::Frame_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionItem_MAV_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool MissionItem_MAV_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MissionItem_MAV_CMD MissionItem::UNKNOWN_CMD;
constexpr MissionItem_MAV_CMD MissionItem::NAV_WAYPOINT;
constexpr MissionItem_MAV_CMD MissionItem::NAV_RETURN_TO_LAUNCH;
constexpr MissionItem_MAV_CMD MissionItem::NAV_LAND;
constexpr MissionItem_MAV_CMD MissionItem::NAV_TAKEOFF;
constexpr MissionItem_MAV_CMD MissionItem::NAV_LAND_LOCAL;
constexpr MissionItem_MAV_CMD MissionItem::NAV_TAKEOFF_LOCAL;
constexpr MissionItem_MAV_CMD MissionItem::DO_FOLLOW;
constexpr MissionItem_MAV_CMD MissionItem::DO_FOLLOW_REPOSITION;
constexpr MissionItem_MAV_CMD MissionItem::DO_ORBIT;
constexpr MissionItem_MAV_CMD MissionItem::DO_FLIGHTTERMINATION;
constexpr MissionItem_MAV_CMD MissionItem::DO_CHANGE_ALTITUDE;
constexpr MissionItem_MAV_CMD MissionItem::DO_RETURN_PATH_START;
constexpr MissionItem_MAV_CMD MissionItem::DO_LAND_START;
constexpr MissionItem_MAV_CMD MissionItem::DO_RALLY_LAND;
constexpr MissionItem_MAV_CMD MissionItem::DO_GO_AROUND;
constexpr MissionItem_MAV_CMD MissionItem::DO_REPOSITION;
constexpr MissionItem_MAV_CMD MissionItem::DO_PAUSE_CONTINUE;
constexpr MissionItem_MAV_CMD MissionItem::MAV_CMD_MIN;
constexpr MissionItem_MAV_CMD MissionItem::MAV_CMD_MAX;
constexpr int MissionItem::MAV_CMD_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sensor_SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[2];
}
bool Sensor_SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Sensor_SensorType Sensor::UNKNOWN_SENSOR;
constexpr Sensor_SensorType Sensor::MULTISPECTRAL;
constexpr Sensor_SensorType Sensor::HYPERSPECTRAL;
constexpr Sensor_SensorType Sensor::ACOUSTIC;
constexpr Sensor_SensorType Sensor::MAGNETIC;
constexpr Sensor_SensorType Sensor::SensorType_MIN;
constexpr Sensor_SensorType Sensor::SensorType_MAX;
constexpr int Sensor::SensorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NDNSF_Response_miniMUAS_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[3];
}
bool NDNSF_Response_miniMUAS_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NDNSF_Response_miniMUAS_Code NDNSF_Response::UNKNOWN_CODE;
constexpr NDNSF_Response_miniMUAS_Code NDNSF_Response::SUCCESS;
constexpr NDNSF_Response_miniMUAS_Code NDNSF_Response::ERROR;
constexpr NDNSF_Response_miniMUAS_Code NDNSF_Response::miniMUAS_Code_MIN;
constexpr NDNSF_Response_miniMUAS_Code NDNSF_Response::miniMUAS_Code_MAX;
constexpr int NDNSF_Response::miniMUAS_Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightCtrl_SwitchMode_Request_FlightMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[4];
}
bool FlightCtrl_SwitchMode_Request_FlightMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FlightCtrl_SwitchMode_Request_FlightMode FlightCtrl_SwitchMode_Request::UNKNOWN;
constexpr FlightCtrl_SwitchMode_Request_FlightMode FlightCtrl_SwitchMode_Request::STABILIZE;
constexpr FlightCtrl_SwitchMode_Request_FlightMode FlightCtrl_SwitchMode_Request::ALT_HOLD;
constexpr FlightCtrl_SwitchMode_Request_FlightMode FlightCtrl_SwitchMode_Request::LOITER;
constexpr FlightCtrl_SwitchMode_Request_FlightMode FlightCtrl_SwitchMode_Request::GUIDED;
constexpr FlightCtrl_SwitchMode_Request_FlightMode FlightCtrl_SwitchMode_Request::FlightMode_MIN;
constexpr FlightCtrl_SwitchMode_Request_FlightMode FlightCtrl_SwitchMode_Request::FlightMode_MAX;
constexpr int FlightCtrl_SwitchMode_Request::FlightMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[5];
}
bool EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MAV_MSG_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[6];
}
bool MAV_MSG_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.altitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.altitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.altitude_));
  // @@protoc_insertion_point(copy_constructor:muas.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.altitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:muas.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.altitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_latitude(), target);
  }

  // float longitude = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  // float altitude = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = from._internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _this->_internal_set_altitude(from._internal_altitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.altitude_)
      + sizeof(Position::_impl_.altitude_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class Orientation::_Internal {
 public:
};

Orientation::Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Orientation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.yaw_, &from._impl_.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roll_) -
    reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.roll_));
  // @@protoc_insertion_point(copy_constructor:muas.Orientation)
}

inline void Orientation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:muas.Orientation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Orientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Orientation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Orientation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float yaw = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_yaw(), target);
  }

  // float pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float roll = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Orientation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float yaw = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Orientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation::GetClassData() const { return &_class_data_; }


void Orientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Orientation*>(&to_msg);
  auto& from = static_cast<const Orientation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Orientation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation, _impl_.roll_)
      + sizeof(Orientation::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(Orientation, _impl_.yaw_)>(
          reinterpret_cast<char*>(&_impl_.yaw_),
          reinterpret_cast<char*>(&other->_impl_.yaw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class MissionItem::_Internal {
 public:
};

MissionItem::MissionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.MissionItem)
}
MissionItem::MissionItem(const MissionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MissionItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_sys_){}
    , decltype(_impl_.target_comp_){}
    , decltype(_impl_.seq_){}
    , decltype(_impl_.frame_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.current_){}
    , decltype(_impl_.autocontinue_){}
    , decltype(_impl_.param1_){}
    , decltype(_impl_.param2_){}
    , decltype(_impl_.param3_){}
    , decltype(_impl_.param4_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_sys_, &from._impl_.target_sys_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.target_sys_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:muas.MissionItem)
}

inline void MissionItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_sys_){0}
    , decltype(_impl_.target_comp_){0}
    , decltype(_impl_.seq_){0}
    , decltype(_impl_.frame_){0}
    , decltype(_impl_.cmd_){0}
    , decltype(_impl_.current_){false}
    , decltype(_impl_.autocontinue_){false}
    , decltype(_impl_.param1_){0}
    , decltype(_impl_.param2_){0}
    , decltype(_impl_.param3_){0}
    , decltype(_impl_.param4_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MissionItem::~MissionItem() {
  // @@protoc_insertion_point(destructor:muas.MissionItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MissionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MissionItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MissionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.MissionItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.target_sys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.target_sys_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 target_sys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_sys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_comp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_comp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.MissionItem.Frame frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_frame(static_cast<::muas::MissionItem_Frame>(val));
        } else
          goto handle_unusual;
        continue;
      // .muas.MissionItem.MAV_CMD cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::muas::MissionItem_MAV_CMD>(val));
        } else
          goto handle_unusual;
        continue;
      // bool current = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool autocontinue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.autocontinue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float param1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.param1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float param2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.param2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float param3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.param3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float param4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.param4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MissionItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.MissionItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 target_sys = 1;
  if (this->_internal_target_sys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_sys(), target);
  }

  // int32 target_comp = 2;
  if (this->_internal_target_comp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_comp(), target);
  }

  // int32 seq = 3;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_seq(), target);
  }

  // .muas.MissionItem.Frame frame = 4;
  if (this->_internal_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_frame(), target);
  }

  // .muas.MissionItem.MAV_CMD cmd = 5;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cmd(), target);
  }

  // bool current = 6;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_current(), target);
  }

  // bool autocontinue = 7;
  if (this->_internal_autocontinue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_autocontinue(), target);
  }

  // float param1 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = this->_internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_param1(), target);
  }

  // float param2 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = this->_internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_param2(), target);
  }

  // float param3 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param3 = this->_internal_param3();
  uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_param3(), target);
  }

  // float param4 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param4 = this->_internal_param4();
  uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_param4(), target);
  }

  // int32 x = 12;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_x(), target);
  }

  // int32 y = 13;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_y(), target);
  }

  // int32 z = 14;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.MissionItem)
  return target;
}

size_t MissionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.MissionItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 target_sys = 1;
  if (this->_internal_target_sys() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_sys());
  }

  // int32 target_comp = 2;
  if (this->_internal_target_comp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_comp());
  }

  // int32 seq = 3;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seq());
  }

  // .muas.MissionItem.Frame frame = 4;
  if (this->_internal_frame() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_frame());
  }

  // .muas.MissionItem.MAV_CMD cmd = 5;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  // bool current = 6;
  if (this->_internal_current() != 0) {
    total_size += 1 + 1;
  }

  // bool autocontinue = 7;
  if (this->_internal_autocontinue() != 0) {
    total_size += 1 + 1;
  }

  // float param1 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = this->_internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    total_size += 1 + 4;
  }

  // float param2 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = this->_internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    total_size += 1 + 4;
  }

  // float param3 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param3 = this->_internal_param3();
  uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    total_size += 1 + 4;
  }

  // float param4 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param4 = this->_internal_param4();
  uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    total_size += 1 + 4;
  }

  // int32 x = 12;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 13;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 z = 14;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MissionItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MissionItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MissionItem::GetClassData() const { return &_class_data_; }


void MissionItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MissionItem*>(&to_msg);
  auto& from = static_cast<const MissionItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.MissionItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_sys() != 0) {
    _this->_internal_set_target_sys(from._internal_target_sys());
  }
  if (from._internal_target_comp() != 0) {
    _this->_internal_set_target_comp(from._internal_target_comp());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  if (from._internal_frame() != 0) {
    _this->_internal_set_frame(from._internal_frame());
  }
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  if (from._internal_current() != 0) {
    _this->_internal_set_current(from._internal_current());
  }
  if (from._internal_autocontinue() != 0) {
    _this->_internal_set_autocontinue(from._internal_autocontinue());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = from._internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    _this->_internal_set_param1(from._internal_param1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = from._internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    _this->_internal_set_param2(from._internal_param2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param3 = from._internal_param3();
  uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    _this->_internal_set_param3(from._internal_param3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param4 = from._internal_param4();
  uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    _this->_internal_set_param4(from._internal_param4());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MissionItem::CopyFrom(const MissionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.MissionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionItem::IsInitialized() const {
  return true;
}

void MissionItem::InternalSwap(MissionItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionItem, _impl_.z_)
      + sizeof(MissionItem::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(MissionItem, _impl_.target_sys_)>(
          reinterpret_cast<char*>(&_impl_.target_sys_),
          reinterpret_cast<char*>(&other->_impl_.target_sys_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class MissionInfo::_Internal {
 public:
};

MissionInfo::MissionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.MissionInfo)
}
MissionInfo::MissionInfo(const MissionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MissionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_items_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_items_ = from._impl_.num_items_;
  // @@protoc_insertion_point(copy_constructor:muas.MissionInfo)
}

inline void MissionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_items_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MissionInfo::~MissionInfo() {
  // @@protoc_insertion_point(destructor:muas.MissionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MissionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MissionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MissionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.MissionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_items_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MissionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.MissionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_items = 1;
  if (this->_internal_num_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.MissionInfo)
  return target;
}

size_t MissionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.MissionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_items = 1;
  if (this->_internal_num_items() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_items());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MissionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MissionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MissionInfo::GetClassData() const { return &_class_data_; }


void MissionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MissionInfo*>(&to_msg);
  auto& from = static_cast<const MissionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.MissionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_items() != 0) {
    _this->_internal_set_num_items(from._internal_num_items());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MissionInfo::CopyFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo::IsInitialized() const {
  return true;
}

void MissionInfo::InternalSwap(MissionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.num_items_, other->_impl_.num_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class Sensor::_Internal {
 public:
};

Sensor::Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.data_namespace_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_namespace().empty()) {
    _this->_impl_.data_namespace_.Set(from._internal_data_namespace(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:muas.Sensor)
}

inline void Sensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.data_namespace_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:muas.Sensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.data_namespace_.Destroy();
}

void Sensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Sensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.data_namespace_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "muas.Sensor.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.Sensor.SensorType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::muas::Sensor_SensorType>(val));
        } else
          goto handle_unusual;
        continue;
      // string data_namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data_namespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "muas.Sensor.data_namespace"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Sensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muas.Sensor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // .muas.Sensor.SensorType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string data_namespace = 4;
  if (!this->_internal_data_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_namespace().data(), static_cast<int>(this->_internal_data_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muas.Sensor.data_namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_data_namespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Sensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string data_namespace = 4;
  if (!this->_internal_data_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_namespace());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .muas.Sensor.SensorType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sensor::GetClassData() const { return &_class_data_; }


void Sensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sensor*>(&to_msg);
  auto& from = static_cast<const Sensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Sensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_data_namespace().empty()) {
    _this->_internal_set_data_namespace(from._internal_data_namespace());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_namespace_, lhs_arena,
      &other->_impl_.data_namespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sensor, _impl_.type_)
      + sizeof(Sensor::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Sensor, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class NDNSF_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<NDNSF_Response>()._impl_._has_bits_);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NDNSF_Response::NDNSF_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.NDNSF_Response)
}
NDNSF_Response::NDNSF_Response(const NDNSF_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NDNSF_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:muas.NDNSF_Response)
}

inline void NDNSF_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.code_){0}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NDNSF_Response::~NDNSF_Response() {
  // @@protoc_insertion_point(destructor:muas.NDNSF_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NDNSF_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void NDNSF_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NDNSF_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.NDNSF_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msg_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDNSF_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response.miniMUAS_Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::muas::NDNSF_Response_miniMUAS_Code>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "muas.NDNSF_Response.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NDNSF_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.NDNSF_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response.miniMUAS_Code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional string msg = 2;
  if (_internal_has_msg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muas.NDNSF_Response.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.NDNSF_Response)
  return target;
}

size_t NDNSF_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.NDNSF_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string msg = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .muas.NDNSF_Response.miniMUAS_Code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NDNSF_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NDNSF_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NDNSF_Response::GetClassData() const { return &_class_data_; }


void NDNSF_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NDNSF_Response*>(&to_msg);
  auto& from = static_cast<const NDNSF_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.NDNSF_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NDNSF_Response::CopyFrom(const NDNSF_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.NDNSF_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDNSF_Response::IsInitialized() const {
  return true;
}

void NDNSF_Response::InternalSwap(NDNSF_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NDNSF_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// ===================================================================

class Entity_Echo_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_sent(const Entity_Echo_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Entity_Echo_Request::_Internal::time_request_sent(const Entity_Echo_Request* msg) {
  return *msg->_impl_.time_request_sent_;
}
void Entity_Echo_Request::clear_time_request_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
}
Entity_Echo_Request::Entity_Echo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Entity_Echo_Request)
}
Entity_Echo_Request::Entity_Echo_Request(const Entity_Echo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entity_Echo_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_sent()) {
    _this->_impl_.time_request_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_sent_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Entity_Echo_Request)
}

inline void Entity_Echo_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Entity_Echo_Request::~Entity_Echo_Request() {
  // @@protoc_insertion_point(destructor:muas.Entity_Echo_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entity_Echo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_sent_;
}

void Entity_Echo_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entity_Echo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Entity_Echo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity_Echo_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entity_Echo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Entity_Echo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_sent(this),
        _Internal::time_request_sent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Entity_Echo_Request)
  return target;
}

size_t Entity_Echo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Entity_Echo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_sent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity_Echo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entity_Echo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity_Echo_Request::GetClassData() const { return &_class_data_; }


void Entity_Echo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entity_Echo_Request*>(&to_msg);
  auto& from = static_cast<const Entity_Echo_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Entity_Echo_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_sent()) {
    _this->_internal_mutable_time_request_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity_Echo_Request::CopyFrom(const Entity_Echo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Entity_Echo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity_Echo_Request::IsInitialized() const {
  return true;
}

void Entity_Echo_Request::InternalSwap(Entity_Echo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_request_sent_, other->_impl_.time_request_sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity_Echo_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}

// ===================================================================

class Entity_Echo_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_received(const Entity_Echo_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_response_sent(const Entity_Echo_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Entity_Echo_Response::_Internal::time_request_received(const Entity_Echo_Response* msg) {
  return *msg->_impl_.time_request_received_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Entity_Echo_Response::_Internal::time_response_sent(const Entity_Echo_Response* msg) {
  return *msg->_impl_.time_response_sent_;
}
void Entity_Echo_Response::clear_time_request_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
}
void Entity_Echo_Response::clear_time_response_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
}
Entity_Echo_Response::Entity_Echo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Entity_Echo_Response)
}
Entity_Echo_Response::Entity_Echo_Response(const Entity_Echo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entity_Echo_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_received()) {
    _this->_impl_.time_request_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_received_);
  }
  if (from._internal_has_time_response_sent()) {
    _this->_impl_.time_response_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_response_sent_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Entity_Echo_Response)
}

inline void Entity_Echo_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Entity_Echo_Response::~Entity_Echo_Response() {
  // @@protoc_insertion_point(destructor:muas.Entity_Echo_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entity_Echo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_received_;
  if (this != internal_default_instance()) delete _impl_.time_response_sent_;
}

void Entity_Echo_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entity_Echo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Entity_Echo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity_Echo_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_response_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_response_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entity_Echo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Entity_Echo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_received(this),
        _Internal::time_request_received(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_response_sent(this),
        _Internal::time_response_sent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Entity_Echo_Response)
  return target;
}

size_t Entity_Echo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Entity_Echo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_received_);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_response_sent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity_Echo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entity_Echo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity_Echo_Response::GetClassData() const { return &_class_data_; }


void Entity_Echo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entity_Echo_Response*>(&to_msg);
  auto& from = static_cast<const Entity_Echo_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Entity_Echo_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_received()) {
    _this->_internal_mutable_time_request_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_received());
  }
  if (from._internal_has_time_response_sent()) {
    _this->_internal_mutable_time_response_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_response_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity_Echo_Response::CopyFrom(const Entity_Echo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Entity_Echo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity_Echo_Response::IsInitialized() const {
  return true;
}

void Entity_Echo_Response::InternalSwap(Entity_Echo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity_Echo_Response, _impl_.time_response_sent_)
      + sizeof(Entity_Echo_Response::_impl_.time_response_sent_)
      - PROTOBUF_FIELD_OFFSET(Entity_Echo_Response, _impl_.time_request_received_)>(
          reinterpret_cast<char*>(&_impl_.time_request_received_),
          reinterpret_cast<char*>(&other->_impl_.time_request_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity_Echo_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[7]);
}

// ===================================================================

class Entity_GetEntityInfo_Request::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Entity_GetEntityInfo_Request* msg);
};

const ::muas::NDNSF_Response&
Entity_GetEntityInfo_Request::_Internal::response(const Entity_GetEntityInfo_Request* msg) {
  return *msg->_impl_.response_;
}
Entity_GetEntityInfo_Request::Entity_GetEntityInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Entity_GetEntityInfo_Request)
}
Entity_GetEntityInfo_Request::Entity_GetEntityInfo_Request(const Entity_GetEntityInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entity_GetEntityInfo_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  _this->_impl_.key_ = from._impl_.key_;
  // @@protoc_insertion_point(copy_constructor:muas.Entity_GetEntityInfo_Request)
}

inline void Entity_GetEntityInfo_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.key_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Entity_GetEntityInfo_Request::~Entity_GetEntityInfo_Request() {
  // @@protoc_insertion_point(destructor:muas.Entity_GetEntityInfo_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entity_GetEntityInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Entity_GetEntityInfo_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entity_GetEntityInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Entity_GetEntityInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _impl_.key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity_GetEntityInfo_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entity_GetEntityInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Entity_GetEntityInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // int32 key = 2;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Entity_GetEntityInfo_Request)
  return target;
}

size_t Entity_GetEntityInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Entity_GetEntityInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // int32 key = 2;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity_GetEntityInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entity_GetEntityInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity_GetEntityInfo_Request::GetClassData() const { return &_class_data_; }


void Entity_GetEntityInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entity_GetEntityInfo_Request*>(&to_msg);
  auto& from = static_cast<const Entity_GetEntityInfo_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Entity_GetEntityInfo_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity_GetEntityInfo_Request::CopyFrom(const Entity_GetEntityInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Entity_GetEntityInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity_GetEntityInfo_Request::IsInitialized() const {
  return true;
}

void Entity_GetEntityInfo_Request::InternalSwap(Entity_GetEntityInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity_GetEntityInfo_Request, _impl_.key_)
      + sizeof(Entity_GetEntityInfo_Request::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(Entity_GetEntityInfo_Request, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity_GetEntityInfo_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[8]);
}

// ===================================================================

class Entity_GetEntityInfo_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Entity_GetEntityInfo_Response* msg);
};

const ::muas::NDNSF_Response&
Entity_GetEntityInfo_Response::_Internal::response(const Entity_GetEntityInfo_Response* msg) {
  return *msg->_impl_.response_;
}
Entity_GetEntityInfo_Response::Entity_GetEntityInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Entity_GetEntityInfo_Response)
}
Entity_GetEntityInfo_Response::Entity_GetEntityInfo_Response(const Entity_GetEntityInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entity_GetEntityInfo_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Entity_GetEntityInfo_Response)
}

inline void Entity_GetEntityInfo_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Entity_GetEntityInfo_Response::~Entity_GetEntityInfo_Response() {
  // @@protoc_insertion_point(destructor:muas.Entity_GetEntityInfo_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entity_GetEntityInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Entity_GetEntityInfo_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entity_GetEntityInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Entity_GetEntityInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity_GetEntityInfo_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "muas.Entity_GetEntityInfo_Response.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entity_GetEntityInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Entity_GetEntityInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muas.Entity_GetEntityInfo_Response.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Entity_GetEntityInfo_Response)
  return target;
}

size_t Entity_GetEntityInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Entity_GetEntityInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity_GetEntityInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entity_GetEntityInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity_GetEntityInfo_Response::GetClassData() const { return &_class_data_; }


void Entity_GetEntityInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entity_GetEntityInfo_Response*>(&to_msg);
  auto& from = static_cast<const Entity_GetEntityInfo_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Entity_GetEntityInfo_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity_GetEntityInfo_Response::CopyFrom(const Entity_GetEntityInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Entity_GetEntityInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity_GetEntityInfo_Response::IsInitialized() const {
  return true;
}

void Entity_GetEntityInfo_Response::InternalSwap(Entity_GetEntityInfo_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity_GetEntityInfo_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[9]);
}

// ===================================================================

class Entity_GetPosition_Request::_Internal {
 public:
};

Entity_GetPosition_Request::Entity_GetPosition_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Entity_GetPosition_Request)
}
Entity_GetPosition_Request::Entity_GetPosition_Request(const Entity_GetPosition_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Entity_GetPosition_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Entity_GetPosition_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity_GetPosition_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity_GetPosition_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Entity_GetPosition_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[10]);
}

// ===================================================================

class Entity_GetPosition_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Entity_GetPosition_Response* msg);
  static const ::muas::Position& pos(const Entity_GetPosition_Response* msg);
};

const ::muas::NDNSF_Response&
Entity_GetPosition_Response::_Internal::response(const Entity_GetPosition_Response* msg) {
  return *msg->_impl_.response_;
}
const ::muas::Position&
Entity_GetPosition_Response::_Internal::pos(const Entity_GetPosition_Response* msg) {
  return *msg->_impl_.pos_;
}
Entity_GetPosition_Response::Entity_GetPosition_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Entity_GetPosition_Response)
}
Entity_GetPosition_Response::Entity_GetPosition_Response(const Entity_GetPosition_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entity_GetPosition_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::muas::Position(*from._impl_.pos_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Entity_GetPosition_Response)
}

inline void Entity_GetPosition_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Entity_GetPosition_Response::~Entity_GetPosition_Response() {
  // @@protoc_insertion_point(destructor:muas.Entity_GetPosition_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entity_GetPosition_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void Entity_GetPosition_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entity_GetPosition_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Entity_GetPosition_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity_GetPosition_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.Position pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entity_GetPosition_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Entity_GetPosition_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .muas.Position pos = 2;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Entity_GetPosition_Response)
  return target;
}

size_t Entity_GetPosition_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Entity_GetPosition_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .muas.Position pos = 2;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity_GetPosition_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entity_GetPosition_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity_GetPosition_Response::GetClassData() const { return &_class_data_; }


void Entity_GetPosition_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entity_GetPosition_Response*>(&to_msg);
  auto& from = static_cast<const Entity_GetPosition_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Entity_GetPosition_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::muas::Position::MergeFrom(
        from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity_GetPosition_Response::CopyFrom(const Entity_GetPosition_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Entity_GetPosition_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity_GetPosition_Response::IsInitialized() const {
  return true;
}

void Entity_GetPosition_Response::InternalSwap(Entity_GetPosition_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity_GetPosition_Response, _impl_.pos_)
      + sizeof(Entity_GetPosition_Response::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(Entity_GetPosition_Response, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity_GetPosition_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[11]);
}

// ===================================================================

class Entity_GetOrientation_Request::_Internal {
 public:
};

Entity_GetOrientation_Request::Entity_GetOrientation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Entity_GetOrientation_Request)
}
Entity_GetOrientation_Request::Entity_GetOrientation_Request(const Entity_GetOrientation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Entity_GetOrientation_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Entity_GetOrientation_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity_GetOrientation_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity_GetOrientation_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Entity_GetOrientation_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[12]);
}

// ===================================================================

class Entity_GetOrientation_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Entity_GetOrientation_Response* msg);
  static const ::muas::Orientation& attitude(const Entity_GetOrientation_Response* msg);
};

const ::muas::NDNSF_Response&
Entity_GetOrientation_Response::_Internal::response(const Entity_GetOrientation_Response* msg) {
  return *msg->_impl_.response_;
}
const ::muas::Orientation&
Entity_GetOrientation_Response::_Internal::attitude(const Entity_GetOrientation_Response* msg) {
  return *msg->_impl_.attitude_;
}
Entity_GetOrientation_Response::Entity_GetOrientation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Entity_GetOrientation_Response)
}
Entity_GetOrientation_Response::Entity_GetOrientation_Response(const Entity_GetOrientation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entity_GetOrientation_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.attitude_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  if (from._internal_has_attitude()) {
    _this->_impl_.attitude_ = new ::muas::Orientation(*from._impl_.attitude_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Entity_GetOrientation_Response)
}

inline void Entity_GetOrientation_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.attitude_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Entity_GetOrientation_Response::~Entity_GetOrientation_Response() {
  // @@protoc_insertion_point(destructor:muas.Entity_GetOrientation_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entity_GetOrientation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.attitude_;
}

void Entity_GetOrientation_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entity_GetOrientation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Entity_GetOrientation_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attitude_ != nullptr) {
    delete _impl_.attitude_;
  }
  _impl_.attitude_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity_GetOrientation_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.Orientation attitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entity_GetOrientation_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Entity_GetOrientation_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .muas.Orientation attitude = 2;
  if (this->_internal_has_attitude()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attitude(this),
        _Internal::attitude(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Entity_GetOrientation_Response)
  return target;
}

size_t Entity_GetOrientation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Entity_GetOrientation_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .muas.Orientation attitude = 2;
  if (this->_internal_has_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attitude_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entity_GetOrientation_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entity_GetOrientation_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entity_GetOrientation_Response::GetClassData() const { return &_class_data_; }


void Entity_GetOrientation_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entity_GetOrientation_Response*>(&to_msg);
  auto& from = static_cast<const Entity_GetOrientation_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Entity_GetOrientation_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_attitude()) {
    _this->_internal_mutable_attitude()->::muas::Orientation::MergeFrom(
        from._internal_attitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entity_GetOrientation_Response::CopyFrom(const Entity_GetOrientation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Entity_GetOrientation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity_GetOrientation_Response::IsInitialized() const {
  return true;
}

void Entity_GetOrientation_Response::InternalSwap(Entity_GetOrientation_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity_GetOrientation_Response, _impl_.attitude_)
      + sizeof(Entity_GetOrientation_Response::_impl_.attitude_)
      - PROTOBUF_FIELD_OFFSET(Entity_GetOrientation_Response, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity_GetOrientation_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[13]);
}

// ===================================================================

class Admin_Test_Request::_Internal {
 public:
};

Admin_Test_Request::Admin_Test_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Admin_Test_Request)
}
Admin_Test_Request::Admin_Test_Request(const Admin_Test_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Admin_Test_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Admin_Test_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Admin_Test_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Admin_Test_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Admin_Test_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[14]);
}

// ===================================================================

class Admin_Test_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Admin_Test_Response* msg);
};

const ::muas::NDNSF_Response&
Admin_Test_Response::_Internal::response(const Admin_Test_Response* msg) {
  return *msg->_impl_.response_;
}
Admin_Test_Response::Admin_Test_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Admin_Test_Response)
}
Admin_Test_Response::Admin_Test_Response(const Admin_Test_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Admin_Test_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reply_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply().empty()) {
    _this->_impl_.reply_.Set(from._internal_reply(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Admin_Test_Response)
}

inline void Admin_Test_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reply_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Admin_Test_Response::~Admin_Test_Response() {
  // @@protoc_insertion_point(destructor:muas.Admin_Test_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Admin_Test_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reply_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Admin_Test_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Admin_Test_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Admin_Test_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reply_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Admin_Test_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "muas.Admin_Test_Response.reply"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Admin_Test_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Admin_Test_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // string reply = 2;
  if (!this->_internal_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muas.Admin_Test_Response.reply");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Admin_Test_Response)
  return target;
}

size_t Admin_Test_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Admin_Test_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply = 2;
  if (!this->_internal_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Admin_Test_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Admin_Test_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Admin_Test_Response::GetClassData() const { return &_class_data_; }


void Admin_Test_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Admin_Test_Response*>(&to_msg);
  auto& from = static_cast<const Admin_Test_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Admin_Test_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reply().empty()) {
    _this->_internal_set_reply(from._internal_reply());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Admin_Test_Response::CopyFrom(const Admin_Test_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Admin_Test_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Test_Response::IsInitialized() const {
  return true;
}

void Admin_Test_Response::InternalSwap(Admin_Test_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_, lhs_arena,
      &other->_impl_.reply_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Admin_Test_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[15]);
}

// ===================================================================

class WUAS_QuadRaster_Request::_Internal {
 public:
  static const ::muas::Position& nw_coord(const WUAS_QuadRaster_Request* msg);
  static const ::muas::Position& se_coord(const WUAS_QuadRaster_Request* msg);
};

const ::muas::Position&
WUAS_QuadRaster_Request::_Internal::nw_coord(const WUAS_QuadRaster_Request* msg) {
  return *msg->_impl_.nw_coord_;
}
const ::muas::Position&
WUAS_QuadRaster_Request::_Internal::se_coord(const WUAS_QuadRaster_Request* msg) {
  return *msg->_impl_.se_coord_;
}
WUAS_QuadRaster_Request::WUAS_QuadRaster_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.WUAS_QuadRaster_Request)
}
WUAS_QuadRaster_Request::WUAS_QuadRaster_Request(const WUAS_QuadRaster_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WUAS_QuadRaster_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nw_coord_){nullptr}
    , decltype(_impl_.se_coord_){nullptr}
    , decltype(_impl_.alt_){}
    , decltype(_impl_.passes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nw_coord()) {
    _this->_impl_.nw_coord_ = new ::muas::Position(*from._impl_.nw_coord_);
  }
  if (from._internal_has_se_coord()) {
    _this->_impl_.se_coord_ = new ::muas::Position(*from._impl_.se_coord_);
  }
  ::memcpy(&_impl_.alt_, &from._impl_.alt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.passes_) -
    reinterpret_cast<char*>(&_impl_.alt_)) + sizeof(_impl_.passes_));
  // @@protoc_insertion_point(copy_constructor:muas.WUAS_QuadRaster_Request)
}

inline void WUAS_QuadRaster_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nw_coord_){nullptr}
    , decltype(_impl_.se_coord_){nullptr}
    , decltype(_impl_.alt_){0}
    , decltype(_impl_.passes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WUAS_QuadRaster_Request::~WUAS_QuadRaster_Request() {
  // @@protoc_insertion_point(destructor:muas.WUAS_QuadRaster_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WUAS_QuadRaster_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nw_coord_;
  if (this != internal_default_instance()) delete _impl_.se_coord_;
}

void WUAS_QuadRaster_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WUAS_QuadRaster_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.WUAS_QuadRaster_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.nw_coord_ != nullptr) {
    delete _impl_.nw_coord_;
  }
  _impl_.nw_coord_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.se_coord_ != nullptr) {
    delete _impl_.se_coord_;
  }
  _impl_.se_coord_ = nullptr;
  ::memset(&_impl_.alt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.passes_) -
      reinterpret_cast<char*>(&_impl_.alt_)) + sizeof(_impl_.passes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WUAS_QuadRaster_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.Position nw_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nw_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.Position se_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_se_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float alt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 passes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.passes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WUAS_QuadRaster_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.WUAS_QuadRaster_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.Position nw_coord = 1;
  if (this->_internal_has_nw_coord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nw_coord(this),
        _Internal::nw_coord(this).GetCachedSize(), target, stream);
  }

  // .muas.Position se_coord = 2;
  if (this->_internal_has_se_coord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::se_coord(this),
        _Internal::se_coord(this).GetCachedSize(), target, stream);
  }

  // float alt = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alt = this->_internal_alt();
  uint32_t raw_alt;
  memcpy(&raw_alt, &tmp_alt, sizeof(tmp_alt));
  if (raw_alt != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_alt(), target);
  }

  // int32 passes = 4;
  if (this->_internal_passes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_passes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.WUAS_QuadRaster_Request)
  return target;
}

size_t WUAS_QuadRaster_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.WUAS_QuadRaster_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.Position nw_coord = 1;
  if (this->_internal_has_nw_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nw_coord_);
  }

  // .muas.Position se_coord = 2;
  if (this->_internal_has_se_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.se_coord_);
  }

  // float alt = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alt = this->_internal_alt();
  uint32_t raw_alt;
  memcpy(&raw_alt, &tmp_alt, sizeof(tmp_alt));
  if (raw_alt != 0) {
    total_size += 1 + 4;
  }

  // int32 passes = 4;
  if (this->_internal_passes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_passes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WUAS_QuadRaster_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WUAS_QuadRaster_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WUAS_QuadRaster_Request::GetClassData() const { return &_class_data_; }


void WUAS_QuadRaster_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WUAS_QuadRaster_Request*>(&to_msg);
  auto& from = static_cast<const WUAS_QuadRaster_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.WUAS_QuadRaster_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nw_coord()) {
    _this->_internal_mutable_nw_coord()->::muas::Position::MergeFrom(
        from._internal_nw_coord());
  }
  if (from._internal_has_se_coord()) {
    _this->_internal_mutable_se_coord()->::muas::Position::MergeFrom(
        from._internal_se_coord());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alt = from._internal_alt();
  uint32_t raw_alt;
  memcpy(&raw_alt, &tmp_alt, sizeof(tmp_alt));
  if (raw_alt != 0) {
    _this->_internal_set_alt(from._internal_alt());
  }
  if (from._internal_passes() != 0) {
    _this->_internal_set_passes(from._internal_passes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WUAS_QuadRaster_Request::CopyFrom(const WUAS_QuadRaster_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.WUAS_QuadRaster_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WUAS_QuadRaster_Request::IsInitialized() const {
  return true;
}

void WUAS_QuadRaster_Request::InternalSwap(WUAS_QuadRaster_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WUAS_QuadRaster_Request, _impl_.passes_)
      + sizeof(WUAS_QuadRaster_Request::_impl_.passes_)
      - PROTOBUF_FIELD_OFFSET(WUAS_QuadRaster_Request, _impl_.nw_coord_)>(
          reinterpret_cast<char*>(&_impl_.nw_coord_),
          reinterpret_cast<char*>(&other->_impl_.nw_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WUAS_QuadRaster_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[16]);
}

// ===================================================================

class WUAS_QuadRaster_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const WUAS_QuadRaster_Response* msg);
};

const ::muas::NDNSF_Response&
WUAS_QuadRaster_Response::_Internal::response(const WUAS_QuadRaster_Response* msg) {
  return *msg->_impl_.response_;
}
WUAS_QuadRaster_Response::WUAS_QuadRaster_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.WUAS_QuadRaster_Response)
}
WUAS_QuadRaster_Response::WUAS_QuadRaster_Response(const WUAS_QuadRaster_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WUAS_QuadRaster_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.WUAS_QuadRaster_Response)
}

inline void WUAS_QuadRaster_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WUAS_QuadRaster_Response::~WUAS_QuadRaster_Response() {
  // @@protoc_insertion_point(destructor:muas.WUAS_QuadRaster_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WUAS_QuadRaster_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void WUAS_QuadRaster_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WUAS_QuadRaster_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.WUAS_QuadRaster_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WUAS_QuadRaster_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WUAS_QuadRaster_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.WUAS_QuadRaster_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.WUAS_QuadRaster_Response)
  return target;
}

size_t WUAS_QuadRaster_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.WUAS_QuadRaster_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WUAS_QuadRaster_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WUAS_QuadRaster_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WUAS_QuadRaster_Response::GetClassData() const { return &_class_data_; }


void WUAS_QuadRaster_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WUAS_QuadRaster_Response*>(&to_msg);
  auto& from = static_cast<const WUAS_QuadRaster_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.WUAS_QuadRaster_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WUAS_QuadRaster_Response::CopyFrom(const WUAS_QuadRaster_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.WUAS_QuadRaster_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WUAS_QuadRaster_Response::IsInitialized() const {
  return true;
}

void WUAS_QuadRaster_Response::InternalSwap(WUAS_QuadRaster_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WUAS_QuadRaster_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[17]);
}

// ===================================================================

class IUAS_PointOrbit_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_sent(const IUAS_PointOrbit_Request* msg);
  static const ::muas::Position& target(const IUAS_PointOrbit_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IUAS_PointOrbit_Request::_Internal::time_request_sent(const IUAS_PointOrbit_Request* msg) {
  return *msg->_impl_.time_request_sent_;
}
const ::muas::Position&
IUAS_PointOrbit_Request::_Internal::target(const IUAS_PointOrbit_Request* msg) {
  return *msg->_impl_.target_;
}
void IUAS_PointOrbit_Request::clear_time_request_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
}
IUAS_PointOrbit_Request::IUAS_PointOrbit_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.IUAS_PointOrbit_Request)
}
IUAS_PointOrbit_Request::IUAS_PointOrbit_Request(const IUAS_PointOrbit_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IUAS_PointOrbit_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_sent()) {
    _this->_impl_.time_request_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_sent_);
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::muas::Position(*from._impl_.target_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.IUAS_PointOrbit_Request)
}

inline void IUAS_PointOrbit_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IUAS_PointOrbit_Request::~IUAS_PointOrbit_Request() {
  // @@protoc_insertion_point(destructor:muas.IUAS_PointOrbit_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IUAS_PointOrbit_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_sent_;
  if (this != internal_default_instance()) delete _impl_.target_;
}

void IUAS_PointOrbit_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IUAS_PointOrbit_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.IUAS_PointOrbit_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IUAS_PointOrbit_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.Position target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IUAS_PointOrbit_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.IUAS_PointOrbit_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_sent(this),
        _Internal::time_request_sent(this).GetCachedSize(), target, stream);
  }

  // .muas.Position target = 2;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.IUAS_PointOrbit_Request)
  return target;
}

size_t IUAS_PointOrbit_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.IUAS_PointOrbit_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_sent_);
  }

  // .muas.Position target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IUAS_PointOrbit_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IUAS_PointOrbit_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IUAS_PointOrbit_Request::GetClassData() const { return &_class_data_; }


void IUAS_PointOrbit_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IUAS_PointOrbit_Request*>(&to_msg);
  auto& from = static_cast<const IUAS_PointOrbit_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.IUAS_PointOrbit_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_sent()) {
    _this->_internal_mutable_time_request_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_sent());
  }
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::muas::Position::MergeFrom(
        from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IUAS_PointOrbit_Request::CopyFrom(const IUAS_PointOrbit_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.IUAS_PointOrbit_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IUAS_PointOrbit_Request::IsInitialized() const {
  return true;
}

void IUAS_PointOrbit_Request::InternalSwap(IUAS_PointOrbit_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IUAS_PointOrbit_Request, _impl_.target_)
      + sizeof(IUAS_PointOrbit_Request::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(IUAS_PointOrbit_Request, _impl_.time_request_sent_)>(
          reinterpret_cast<char*>(&_impl_.time_request_sent_),
          reinterpret_cast<char*>(&other->_impl_.time_request_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IUAS_PointOrbit_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[18]);
}

// ===================================================================

class IUAS_PointOrbit_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_received(const IUAS_PointOrbit_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_response_sent(const IUAS_PointOrbit_Response* msg);
  static const ::muas::NDNSF_Response& response(const IUAS_PointOrbit_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IUAS_PointOrbit_Response::_Internal::time_request_received(const IUAS_PointOrbit_Response* msg) {
  return *msg->_impl_.time_request_received_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IUAS_PointOrbit_Response::_Internal::time_response_sent(const IUAS_PointOrbit_Response* msg) {
  return *msg->_impl_.time_response_sent_;
}
const ::muas::NDNSF_Response&
IUAS_PointOrbit_Response::_Internal::response(const IUAS_PointOrbit_Response* msg) {
  return *msg->_impl_.response_;
}
void IUAS_PointOrbit_Response::clear_time_request_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
}
void IUAS_PointOrbit_Response::clear_time_response_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
}
IUAS_PointOrbit_Response::IUAS_PointOrbit_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.IUAS_PointOrbit_Response)
}
IUAS_PointOrbit_Response::IUAS_PointOrbit_Response(const IUAS_PointOrbit_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IUAS_PointOrbit_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_received()) {
    _this->_impl_.time_request_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_received_);
  }
  if (from._internal_has_time_response_sent()) {
    _this->_impl_.time_response_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_response_sent_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.IUAS_PointOrbit_Response)
}

inline void IUAS_PointOrbit_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IUAS_PointOrbit_Response::~IUAS_PointOrbit_Response() {
  // @@protoc_insertion_point(destructor:muas.IUAS_PointOrbit_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IUAS_PointOrbit_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_received_;
  if (this != internal_default_instance()) delete _impl_.time_response_sent_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void IUAS_PointOrbit_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IUAS_PointOrbit_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.IUAS_PointOrbit_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IUAS_PointOrbit_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_response_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_response_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.NDNSF_Response response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IUAS_PointOrbit_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.IUAS_PointOrbit_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_received(this),
        _Internal::time_request_received(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_response_sent(this),
        _Internal::time_response_sent(this).GetCachedSize(), target, stream);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.IUAS_PointOrbit_Response)
  return target;
}

size_t IUAS_PointOrbit_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.IUAS_PointOrbit_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_received_);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_response_sent_);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IUAS_PointOrbit_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IUAS_PointOrbit_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IUAS_PointOrbit_Response::GetClassData() const { return &_class_data_; }


void IUAS_PointOrbit_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IUAS_PointOrbit_Response*>(&to_msg);
  auto& from = static_cast<const IUAS_PointOrbit_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.IUAS_PointOrbit_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_received()) {
    _this->_internal_mutable_time_request_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_received());
  }
  if (from._internal_has_time_response_sent()) {
    _this->_internal_mutable_time_response_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_response_sent());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IUAS_PointOrbit_Response::CopyFrom(const IUAS_PointOrbit_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.IUAS_PointOrbit_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IUAS_PointOrbit_Response::IsInitialized() const {
  return true;
}

void IUAS_PointOrbit_Response::InternalSwap(IUAS_PointOrbit_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IUAS_PointOrbit_Response, _impl_.response_)
      + sizeof(IUAS_PointOrbit_Response::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(IUAS_PointOrbit_Response, _impl_.time_request_received_)>(
          reinterpret_cast<char*>(&_impl_.time_request_received_),
          reinterpret_cast<char*>(&other->_impl_.time_request_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IUAS_PointOrbit_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[19]);
}

// ===================================================================

class IUAS_PointHover_Request::_Internal {
 public:
  static const ::muas::Position& pos(const IUAS_PointHover_Request* msg);
};

const ::muas::Position&
IUAS_PointHover_Request::_Internal::pos(const IUAS_PointHover_Request* msg) {
  return *msg->_impl_.pos_;
}
IUAS_PointHover_Request::IUAS_PointHover_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.IUAS_PointHover_Request)
}
IUAS_PointHover_Request::IUAS_PointHover_Request(const IUAS_PointHover_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IUAS_PointHover_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::muas::Position(*from._impl_.pos_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.IUAS_PointHover_Request)
}

inline void IUAS_PointHover_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IUAS_PointHover_Request::~IUAS_PointHover_Request() {
  // @@protoc_insertion_point(destructor:muas.IUAS_PointHover_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IUAS_PointHover_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void IUAS_PointHover_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IUAS_PointHover_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.IUAS_PointHover_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IUAS_PointHover_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.Position pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IUAS_PointHover_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.IUAS_PointHover_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.Position pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.IUAS_PointHover_Request)
  return target;
}

size_t IUAS_PointHover_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.IUAS_PointHover_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.Position pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IUAS_PointHover_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IUAS_PointHover_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IUAS_PointHover_Request::GetClassData() const { return &_class_data_; }


void IUAS_PointHover_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IUAS_PointHover_Request*>(&to_msg);
  auto& from = static_cast<const IUAS_PointHover_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.IUAS_PointHover_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::muas::Position::MergeFrom(
        from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IUAS_PointHover_Request::CopyFrom(const IUAS_PointHover_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.IUAS_PointHover_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IUAS_PointHover_Request::IsInitialized() const {
  return true;
}

void IUAS_PointHover_Request::InternalSwap(IUAS_PointHover_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pos_, other->_impl_.pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IUAS_PointHover_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[20]);
}

// ===================================================================

class IUAS_PointHover_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const IUAS_PointHover_Response* msg);
};

const ::muas::NDNSF_Response&
IUAS_PointHover_Response::_Internal::response(const IUAS_PointHover_Response* msg) {
  return *msg->_impl_.response_;
}
IUAS_PointHover_Response::IUAS_PointHover_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.IUAS_PointHover_Response)
}
IUAS_PointHover_Response::IUAS_PointHover_Response(const IUAS_PointHover_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IUAS_PointHover_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.IUAS_PointHover_Response)
}

inline void IUAS_PointHover_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IUAS_PointHover_Response::~IUAS_PointHover_Response() {
  // @@protoc_insertion_point(destructor:muas.IUAS_PointHover_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IUAS_PointHover_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void IUAS_PointHover_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IUAS_PointHover_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.IUAS_PointHover_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IUAS_PointHover_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IUAS_PointHover_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.IUAS_PointHover_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.IUAS_PointHover_Response)
  return target;
}

size_t IUAS_PointHover_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.IUAS_PointHover_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IUAS_PointHover_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IUAS_PointHover_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IUAS_PointHover_Response::GetClassData() const { return &_class_data_; }


void IUAS_PointHover_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IUAS_PointHover_Response*>(&to_msg);
  auto& from = static_cast<const IUAS_PointHover_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.IUAS_PointHover_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IUAS_PointHover_Response::CopyFrom(const IUAS_PointHover_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.IUAS_PointHover_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IUAS_PointHover_Response::IsInitialized() const {
  return true;
}

void IUAS_PointHover_Response::InternalSwap(IUAS_PointHover_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IUAS_PointHover_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[21]);
}

// ===================================================================

class Mission_GetMissionInfo_Request::_Internal {
 public:
};

Mission_GetMissionInfo_Request::Mission_GetMissionInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Mission_GetMissionInfo_Request)
}
Mission_GetMissionInfo_Request::Mission_GetMissionInfo_Request(const Mission_GetMissionInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Mission_GetMissionInfo_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Mission_GetMissionInfo_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_GetMissionInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_GetMissionInfo_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Mission_GetMissionInfo_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[22]);
}

// ===================================================================

class Mission_GetMissionInfo_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Mission_GetMissionInfo_Response* msg);
  static const ::muas::MissionInfo& info(const Mission_GetMissionInfo_Response* msg);
};

const ::muas::NDNSF_Response&
Mission_GetMissionInfo_Response::_Internal::response(const Mission_GetMissionInfo_Response* msg) {
  return *msg->_impl_.response_;
}
const ::muas::MissionInfo&
Mission_GetMissionInfo_Response::_Internal::info(const Mission_GetMissionInfo_Response* msg) {
  return *msg->_impl_.info_;
}
Mission_GetMissionInfo_Response::Mission_GetMissionInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_GetMissionInfo_Response)
}
Mission_GetMissionInfo_Response::Mission_GetMissionInfo_Response(const Mission_GetMissionInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_GetMissionInfo_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::muas::MissionInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Mission_GetMissionInfo_Response)
}

inline void Mission_GetMissionInfo_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_GetMissionInfo_Response::~Mission_GetMissionInfo_Response() {
  // @@protoc_insertion_point(destructor:muas.Mission_GetMissionInfo_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_GetMissionInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void Mission_GetMissionInfo_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_GetMissionInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_GetMissionInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_GetMissionInfo_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.MissionInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_GetMissionInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_GetMissionInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .muas.MissionInfo info = 2;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_GetMissionInfo_Response)
  return target;
}

size_t Mission_GetMissionInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_GetMissionInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .muas.MissionInfo info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_GetMissionInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_GetMissionInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_GetMissionInfo_Response::GetClassData() const { return &_class_data_; }


void Mission_GetMissionInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_GetMissionInfo_Response*>(&to_msg);
  auto& from = static_cast<const Mission_GetMissionInfo_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_GetMissionInfo_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::muas::MissionInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_GetMissionInfo_Response::CopyFrom(const Mission_GetMissionInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_GetMissionInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_GetMissionInfo_Response::IsInitialized() const {
  return true;
}

void Mission_GetMissionInfo_Response::InternalSwap(Mission_GetMissionInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mission_GetMissionInfo_Response, _impl_.info_)
      + sizeof(Mission_GetMissionInfo_Response::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(Mission_GetMissionInfo_Response, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_GetMissionInfo_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[23]);
}

// ===================================================================

class Mission_GetItem_Request::_Internal {
 public:
};

Mission_GetItem_Request::Mission_GetItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_GetItem_Request)
}
Mission_GetItem_Request::Mission_GetItem_Request(const Mission_GetItem_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_GetItem_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.idx_ = from._impl_.idx_;
  // @@protoc_insertion_point(copy_constructor:muas.Mission_GetItem_Request)
}

inline void Mission_GetItem_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.idx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_GetItem_Request::~Mission_GetItem_Request() {
  // @@protoc_insertion_point(destructor:muas.Mission_GetItem_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_GetItem_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Mission_GetItem_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_GetItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_GetItem_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_GetItem_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_GetItem_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_GetItem_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_GetItem_Request)
  return target;
}

size_t Mission_GetItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_GetItem_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_GetItem_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_GetItem_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_GetItem_Request::GetClassData() const { return &_class_data_; }


void Mission_GetItem_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_GetItem_Request*>(&to_msg);
  auto& from = static_cast<const Mission_GetItem_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_GetItem_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_GetItem_Request::CopyFrom(const Mission_GetItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_GetItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_GetItem_Request::IsInitialized() const {
  return true;
}

void Mission_GetItem_Request::InternalSwap(Mission_GetItem_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.idx_, other->_impl_.idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_GetItem_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[24]);
}

// ===================================================================

class Mission_GetItem_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Mission_GetItem_Response* msg);
  static const ::muas::MissionItem& item(const Mission_GetItem_Response* msg);
};

const ::muas::NDNSF_Response&
Mission_GetItem_Response::_Internal::response(const Mission_GetItem_Response* msg) {
  return *msg->_impl_.response_;
}
const ::muas::MissionItem&
Mission_GetItem_Response::_Internal::item(const Mission_GetItem_Response* msg) {
  return *msg->_impl_.item_;
}
Mission_GetItem_Response::Mission_GetItem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_GetItem_Response)
}
Mission_GetItem_Response::Mission_GetItem_Response(const Mission_GetItem_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_GetItem_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::muas::MissionItem(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Mission_GetItem_Response)
}

inline void Mission_GetItem_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_GetItem_Response::~Mission_GetItem_Response() {
  // @@protoc_insertion_point(destructor:muas.Mission_GetItem_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_GetItem_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
  if (this != internal_default_instance()) delete _impl_.item_;
}

void Mission_GetItem_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_GetItem_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_GetItem_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_GetItem_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.MissionItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_GetItem_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_GetItem_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .muas.MissionItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_GetItem_Response)
  return target;
}

size_t Mission_GetItem_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_GetItem_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .muas.MissionItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_GetItem_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_GetItem_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_GetItem_Response::GetClassData() const { return &_class_data_; }


void Mission_GetItem_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_GetItem_Response*>(&to_msg);
  auto& from = static_cast<const Mission_GetItem_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_GetItem_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::muas::MissionItem::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_GetItem_Response::CopyFrom(const Mission_GetItem_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_GetItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_GetItem_Response::IsInitialized() const {
  return true;
}

void Mission_GetItem_Response::InternalSwap(Mission_GetItem_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mission_GetItem_Response, _impl_.item_)
      + sizeof(Mission_GetItem_Response::_impl_.item_)
      - PROTOBUF_FIELD_OFFSET(Mission_GetItem_Response, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_GetItem_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[25]);
}

// ===================================================================

class Mission_SetItem_Request::_Internal {
 public:
  static const ::muas::MissionItem& item(const Mission_SetItem_Request* msg);
};

const ::muas::MissionItem&
Mission_SetItem_Request::_Internal::item(const Mission_SetItem_Request* msg) {
  return *msg->_impl_.item_;
}
Mission_SetItem_Request::Mission_SetItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_SetItem_Request)
}
Mission_SetItem_Request::Mission_SetItem_Request(const Mission_SetItem_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_SetItem_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::muas::MissionItem(*from._impl_.item_);
  }
  _this->_impl_.idx_ = from._impl_.idx_;
  // @@protoc_insertion_point(copy_constructor:muas.Mission_SetItem_Request)
}

inline void Mission_SetItem_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.idx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_SetItem_Request::~Mission_SetItem_Request() {
  // @@protoc_insertion_point(destructor:muas.Mission_SetItem_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_SetItem_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void Mission_SetItem_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_SetItem_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_SetItem_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_SetItem_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.MissionItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_SetItem_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_SetItem_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // .muas.MissionItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_SetItem_Request)
  return target;
}

size_t Mission_SetItem_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_SetItem_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.MissionItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // int32 idx = 1;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_SetItem_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_SetItem_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_SetItem_Request::GetClassData() const { return &_class_data_; }


void Mission_SetItem_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_SetItem_Request*>(&to_msg);
  auto& from = static_cast<const Mission_SetItem_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_SetItem_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::muas::MissionItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_SetItem_Request::CopyFrom(const Mission_SetItem_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_SetItem_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_SetItem_Request::IsInitialized() const {
  return true;
}

void Mission_SetItem_Request::InternalSwap(Mission_SetItem_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mission_SetItem_Request, _impl_.idx_)
      + sizeof(Mission_SetItem_Request::_impl_.idx_)
      - PROTOBUF_FIELD_OFFSET(Mission_SetItem_Request, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_SetItem_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[26]);
}

// ===================================================================

class Mission_SetItem_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Mission_SetItem_Response* msg);
};

const ::muas::NDNSF_Response&
Mission_SetItem_Response::_Internal::response(const Mission_SetItem_Response* msg) {
  return *msg->_impl_.response_;
}
Mission_SetItem_Response::Mission_SetItem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_SetItem_Response)
}
Mission_SetItem_Response::Mission_SetItem_Response(const Mission_SetItem_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_SetItem_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Mission_SetItem_Response)
}

inline void Mission_SetItem_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_SetItem_Response::~Mission_SetItem_Response() {
  // @@protoc_insertion_point(destructor:muas.Mission_SetItem_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_SetItem_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Mission_SetItem_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_SetItem_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_SetItem_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_SetItem_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_SetItem_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_SetItem_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_SetItem_Response)
  return target;
}

size_t Mission_SetItem_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_SetItem_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_SetItem_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_SetItem_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_SetItem_Response::GetClassData() const { return &_class_data_; }


void Mission_SetItem_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_SetItem_Response*>(&to_msg);
  auto& from = static_cast<const Mission_SetItem_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_SetItem_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_SetItem_Response::CopyFrom(const Mission_SetItem_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_SetItem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_SetItem_Response::IsInitialized() const {
  return true;
}

void Mission_SetItem_Response::InternalSwap(Mission_SetItem_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_SetItem_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[27]);
}

// ===================================================================

class Mission_Clear_Request::_Internal {
 public:
};

Mission_Clear_Request::Mission_Clear_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Clear_Request)
}
Mission_Clear_Request::Mission_Clear_Request(const Mission_Clear_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Mission_Clear_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Clear_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Clear_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Clear_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Mission_Clear_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[28]);
}

// ===================================================================

class Mission_Clear_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Mission_Clear_Response* msg);
};

const ::muas::NDNSF_Response&
Mission_Clear_Response::_Internal::response(const Mission_Clear_Response* msg) {
  return *msg->_impl_.response_;
}
Mission_Clear_Response::Mission_Clear_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Clear_Response)
}
Mission_Clear_Response::Mission_Clear_Response(const Mission_Clear_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_Clear_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Clear_Response)
}

inline void Mission_Clear_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_Clear_Response::~Mission_Clear_Response() {
  // @@protoc_insertion_point(destructor:muas.Mission_Clear_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_Clear_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Mission_Clear_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_Clear_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_Clear_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_Clear_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_Clear_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_Clear_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_Clear_Response)
  return target;
}

size_t Mission_Clear_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_Clear_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Clear_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_Clear_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Clear_Response::GetClassData() const { return &_class_data_; }


void Mission_Clear_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_Clear_Response*>(&to_msg);
  auto& from = static_cast<const Mission_Clear_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_Clear_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_Clear_Response::CopyFrom(const Mission_Clear_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_Clear_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_Clear_Response::IsInitialized() const {
  return true;
}

void Mission_Clear_Response::InternalSwap(Mission_Clear_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_Clear_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[29]);
}

// ===================================================================

class Mission_Start_Request::_Internal {
 public:
};

Mission_Start_Request::Mission_Start_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Start_Request)
}
Mission_Start_Request::Mission_Start_Request(const Mission_Start_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Mission_Start_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Start_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Start_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Start_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Mission_Start_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[30]);
}

// ===================================================================

class Mission_Start_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Mission_Start_Response* msg);
};

const ::muas::NDNSF_Response&
Mission_Start_Response::_Internal::response(const Mission_Start_Response* msg) {
  return *msg->_impl_.response_;
}
Mission_Start_Response::Mission_Start_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Start_Response)
}
Mission_Start_Response::Mission_Start_Response(const Mission_Start_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_Start_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Start_Response)
}

inline void Mission_Start_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_Start_Response::~Mission_Start_Response() {
  // @@protoc_insertion_point(destructor:muas.Mission_Start_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_Start_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Mission_Start_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_Start_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_Start_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_Start_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_Start_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_Start_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_Start_Response)
  return target;
}

size_t Mission_Start_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_Start_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Start_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_Start_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Start_Response::GetClassData() const { return &_class_data_; }


void Mission_Start_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_Start_Response*>(&to_msg);
  auto& from = static_cast<const Mission_Start_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_Start_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_Start_Response::CopyFrom(const Mission_Start_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_Start_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_Start_Response::IsInitialized() const {
  return true;
}

void Mission_Start_Response::InternalSwap(Mission_Start_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_Start_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[31]);
}

// ===================================================================

class Mission_Pause_Request::_Internal {
 public:
};

Mission_Pause_Request::Mission_Pause_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Pause_Request)
}
Mission_Pause_Request::Mission_Pause_Request(const Mission_Pause_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Mission_Pause_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Pause_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Pause_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Pause_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Mission_Pause_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[32]);
}

// ===================================================================

class Mission_Pause_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Mission_Pause_Response* msg);
};

const ::muas::NDNSF_Response&
Mission_Pause_Response::_Internal::response(const Mission_Pause_Response* msg) {
  return *msg->_impl_.response_;
}
Mission_Pause_Response::Mission_Pause_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Pause_Response)
}
Mission_Pause_Response::Mission_Pause_Response(const Mission_Pause_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_Pause_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Pause_Response)
}

inline void Mission_Pause_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_Pause_Response::~Mission_Pause_Response() {
  // @@protoc_insertion_point(destructor:muas.Mission_Pause_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_Pause_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Mission_Pause_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_Pause_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_Pause_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_Pause_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_Pause_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_Pause_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_Pause_Response)
  return target;
}

size_t Mission_Pause_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_Pause_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Pause_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_Pause_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Pause_Response::GetClassData() const { return &_class_data_; }


void Mission_Pause_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_Pause_Response*>(&to_msg);
  auto& from = static_cast<const Mission_Pause_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_Pause_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_Pause_Response::CopyFrom(const Mission_Pause_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_Pause_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_Pause_Response::IsInitialized() const {
  return true;
}

void Mission_Pause_Response::InternalSwap(Mission_Pause_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_Pause_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[33]);
}

// ===================================================================

class Mission_Continue_Request::_Internal {
 public:
};

Mission_Continue_Request::Mission_Continue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Continue_Request)
}
Mission_Continue_Request::Mission_Continue_Request(const Mission_Continue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Mission_Continue_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Continue_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Continue_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Continue_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Mission_Continue_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[34]);
}

// ===================================================================

class Mission_Continue_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Mission_Continue_Response* msg);
};

const ::muas::NDNSF_Response&
Mission_Continue_Response::_Internal::response(const Mission_Continue_Response* msg) {
  return *msg->_impl_.response_;
}
Mission_Continue_Response::Mission_Continue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Continue_Response)
}
Mission_Continue_Response::Mission_Continue_Response(const Mission_Continue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_Continue_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Continue_Response)
}

inline void Mission_Continue_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_Continue_Response::~Mission_Continue_Response() {
  // @@protoc_insertion_point(destructor:muas.Mission_Continue_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_Continue_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Mission_Continue_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_Continue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_Continue_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_Continue_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_Continue_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_Continue_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_Continue_Response)
  return target;
}

size_t Mission_Continue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_Continue_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Continue_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_Continue_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Continue_Response::GetClassData() const { return &_class_data_; }


void Mission_Continue_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_Continue_Response*>(&to_msg);
  auto& from = static_cast<const Mission_Continue_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_Continue_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_Continue_Response::CopyFrom(const Mission_Continue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_Continue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_Continue_Response::IsInitialized() const {
  return true;
}

void Mission_Continue_Response::InternalSwap(Mission_Continue_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_Continue_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[35]);
}

// ===================================================================

class Mission_Terminate_Request::_Internal {
 public:
};

Mission_Terminate_Request::Mission_Terminate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Terminate_Request)
}
Mission_Terminate_Request::Mission_Terminate_Request(const Mission_Terminate_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Mission_Terminate_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Terminate_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Terminate_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Terminate_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Mission_Terminate_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[36]);
}

// ===================================================================

class Mission_Terminate_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const Mission_Terminate_Response* msg);
};

const ::muas::NDNSF_Response&
Mission_Terminate_Response::_Internal::response(const Mission_Terminate_Response* msg) {
  return *msg->_impl_.response_;
}
Mission_Terminate_Response::Mission_Terminate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.Mission_Terminate_Response)
}
Mission_Terminate_Response::Mission_Terminate_Response(const Mission_Terminate_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mission_Terminate_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.Mission_Terminate_Response)
}

inline void Mission_Terminate_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mission_Terminate_Response::~Mission_Terminate_Response() {
  // @@protoc_insertion_point(destructor:muas.Mission_Terminate_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mission_Terminate_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void Mission_Terminate_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mission_Terminate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.Mission_Terminate_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission_Terminate_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mission_Terminate_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.Mission_Terminate_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.Mission_Terminate_Response)
  return target;
}

size_t Mission_Terminate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.Mission_Terminate_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mission_Terminate_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mission_Terminate_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mission_Terminate_Response::GetClassData() const { return &_class_data_; }


void Mission_Terminate_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mission_Terminate_Response*>(&to_msg);
  auto& from = static_cast<const Mission_Terminate_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.Mission_Terminate_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mission_Terminate_Response::CopyFrom(const Mission_Terminate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.Mission_Terminate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission_Terminate_Response::IsInitialized() const {
  return true;
}

void Mission_Terminate_Response::InternalSwap(Mission_Terminate_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission_Terminate_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[37]);
}

// ===================================================================

class FlightCtrl_SwitchMode_Request::_Internal {
 public:
};

FlightCtrl_SwitchMode_Request::FlightCtrl_SwitchMode_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_SwitchMode_Request)
}
FlightCtrl_SwitchMode_Request::FlightCtrl_SwitchMode_Request(const FlightCtrl_SwitchMode_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_SwitchMode_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_SwitchMode_Request)
}

inline void FlightCtrl_SwitchMode_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_SwitchMode_Request::~FlightCtrl_SwitchMode_Request() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_SwitchMode_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_SwitchMode_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlightCtrl_SwitchMode_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_SwitchMode_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_SwitchMode_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_SwitchMode_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.FlightCtrl_SwitchMode_Request.FlightMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::muas::FlightCtrl_SwitchMode_Request_FlightMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_SwitchMode_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_SwitchMode_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.FlightCtrl_SwitchMode_Request.FlightMode mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_SwitchMode_Request)
  return target;
}

size_t FlightCtrl_SwitchMode_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_SwitchMode_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.FlightCtrl_SwitchMode_Request.FlightMode mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_SwitchMode_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_SwitchMode_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_SwitchMode_Request::GetClassData() const { return &_class_data_; }


void FlightCtrl_SwitchMode_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_SwitchMode_Request*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_SwitchMode_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_SwitchMode_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_SwitchMode_Request::CopyFrom(const FlightCtrl_SwitchMode_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_SwitchMode_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_SwitchMode_Request::IsInitialized() const {
  return true;
}

void FlightCtrl_SwitchMode_Request::InternalSwap(FlightCtrl_SwitchMode_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_SwitchMode_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[38]);
}

// ===================================================================

class FlightCtrl_SwitchMode_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const FlightCtrl_SwitchMode_Response* msg);
};

const ::muas::NDNSF_Response&
FlightCtrl_SwitchMode_Response::_Internal::response(const FlightCtrl_SwitchMode_Response* msg) {
  return *msg->_impl_.response_;
}
FlightCtrl_SwitchMode_Response::FlightCtrl_SwitchMode_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_SwitchMode_Response)
}
FlightCtrl_SwitchMode_Response::FlightCtrl_SwitchMode_Response(const FlightCtrl_SwitchMode_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_SwitchMode_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_SwitchMode_Response)
}

inline void FlightCtrl_SwitchMode_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_SwitchMode_Response::~FlightCtrl_SwitchMode_Response() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_SwitchMode_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_SwitchMode_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void FlightCtrl_SwitchMode_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_SwitchMode_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_SwitchMode_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_SwitchMode_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_SwitchMode_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_SwitchMode_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_SwitchMode_Response)
  return target;
}

size_t FlightCtrl_SwitchMode_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_SwitchMode_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_SwitchMode_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_SwitchMode_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_SwitchMode_Response::GetClassData() const { return &_class_data_; }


void FlightCtrl_SwitchMode_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_SwitchMode_Response*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_SwitchMode_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_SwitchMode_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_SwitchMode_Response::CopyFrom(const FlightCtrl_SwitchMode_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_SwitchMode_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_SwitchMode_Response::IsInitialized() const {
  return true;
}

void FlightCtrl_SwitchMode_Response::InternalSwap(FlightCtrl_SwitchMode_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_SwitchMode_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[39]);
}

// ===================================================================

class FlightCtrl_Takeoff_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_sent(const FlightCtrl_Takeoff_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Takeoff_Request::_Internal::time_request_sent(const FlightCtrl_Takeoff_Request* msg) {
  return *msg->_impl_.time_request_sent_;
}
void FlightCtrl_Takeoff_Request::clear_time_request_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
}
FlightCtrl_Takeoff_Request::FlightCtrl_Takeoff_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_Takeoff_Request)
}
FlightCtrl_Takeoff_Request::FlightCtrl_Takeoff_Request(const FlightCtrl_Takeoff_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_Takeoff_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_sent()) {
    _this->_impl_.time_request_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_sent_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_Takeoff_Request)
}

inline void FlightCtrl_Takeoff_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_Takeoff_Request::~FlightCtrl_Takeoff_Request() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_Takeoff_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_Takeoff_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_sent_;
}

void FlightCtrl_Takeoff_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_Takeoff_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_Takeoff_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_Takeoff_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_Takeoff_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_Takeoff_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_sent(this),
        _Internal::time_request_sent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_Takeoff_Request)
  return target;
}

size_t FlightCtrl_Takeoff_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_Takeoff_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_sent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_Takeoff_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_Takeoff_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_Takeoff_Request::GetClassData() const { return &_class_data_; }


void FlightCtrl_Takeoff_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_Takeoff_Request*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_Takeoff_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_Takeoff_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_sent()) {
    _this->_internal_mutable_time_request_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_Takeoff_Request::CopyFrom(const FlightCtrl_Takeoff_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_Takeoff_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_Takeoff_Request::IsInitialized() const {
  return true;
}

void FlightCtrl_Takeoff_Request::InternalSwap(FlightCtrl_Takeoff_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_request_sent_, other->_impl_.time_request_sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_Takeoff_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[40]);
}

// ===================================================================

class FlightCtrl_Takeoff_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_received(const FlightCtrl_Takeoff_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_response_sent(const FlightCtrl_Takeoff_Response* msg);
  static const ::muas::NDNSF_Response& response(const FlightCtrl_Takeoff_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Takeoff_Response::_Internal::time_request_received(const FlightCtrl_Takeoff_Response* msg) {
  return *msg->_impl_.time_request_received_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Takeoff_Response::_Internal::time_response_sent(const FlightCtrl_Takeoff_Response* msg) {
  return *msg->_impl_.time_response_sent_;
}
const ::muas::NDNSF_Response&
FlightCtrl_Takeoff_Response::_Internal::response(const FlightCtrl_Takeoff_Response* msg) {
  return *msg->_impl_.response_;
}
void FlightCtrl_Takeoff_Response::clear_time_request_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
}
void FlightCtrl_Takeoff_Response::clear_time_response_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
}
FlightCtrl_Takeoff_Response::FlightCtrl_Takeoff_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_Takeoff_Response)
}
FlightCtrl_Takeoff_Response::FlightCtrl_Takeoff_Response(const FlightCtrl_Takeoff_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_Takeoff_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_received()) {
    _this->_impl_.time_request_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_received_);
  }
  if (from._internal_has_time_response_sent()) {
    _this->_impl_.time_response_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_response_sent_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_Takeoff_Response)
}

inline void FlightCtrl_Takeoff_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_Takeoff_Response::~FlightCtrl_Takeoff_Response() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_Takeoff_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_Takeoff_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_received_;
  if (this != internal_default_instance()) delete _impl_.time_response_sent_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void FlightCtrl_Takeoff_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_Takeoff_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_Takeoff_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_Takeoff_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_response_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_response_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.NDNSF_Response response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_Takeoff_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_Takeoff_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_received(this),
        _Internal::time_request_received(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_response_sent(this),
        _Internal::time_response_sent(this).GetCachedSize(), target, stream);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_Takeoff_Response)
  return target;
}

size_t FlightCtrl_Takeoff_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_Takeoff_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_received_);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_response_sent_);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_Takeoff_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_Takeoff_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_Takeoff_Response::GetClassData() const { return &_class_data_; }


void FlightCtrl_Takeoff_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_Takeoff_Response*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_Takeoff_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_Takeoff_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_received()) {
    _this->_internal_mutable_time_request_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_received());
  }
  if (from._internal_has_time_response_sent()) {
    _this->_internal_mutable_time_response_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_response_sent());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_Takeoff_Response::CopyFrom(const FlightCtrl_Takeoff_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_Takeoff_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_Takeoff_Response::IsInitialized() const {
  return true;
}

void FlightCtrl_Takeoff_Response::InternalSwap(FlightCtrl_Takeoff_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightCtrl_Takeoff_Response, _impl_.response_)
      + sizeof(FlightCtrl_Takeoff_Response::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(FlightCtrl_Takeoff_Response, _impl_.time_request_received_)>(
          reinterpret_cast<char*>(&_impl_.time_request_received_),
          reinterpret_cast<char*>(&other->_impl_.time_request_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_Takeoff_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[41]);
}

// ===================================================================

class FlightCtrl_Land_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_sent(const FlightCtrl_Land_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Land_Request::_Internal::time_request_sent(const FlightCtrl_Land_Request* msg) {
  return *msg->_impl_.time_request_sent_;
}
void FlightCtrl_Land_Request::clear_time_request_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
}
FlightCtrl_Land_Request::FlightCtrl_Land_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_Land_Request)
}
FlightCtrl_Land_Request::FlightCtrl_Land_Request(const FlightCtrl_Land_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_Land_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_sent()) {
    _this->_impl_.time_request_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_sent_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_Land_Request)
}

inline void FlightCtrl_Land_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_Land_Request::~FlightCtrl_Land_Request() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_Land_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_Land_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_sent_;
}

void FlightCtrl_Land_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_Land_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_Land_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_Land_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_Land_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_Land_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_sent(this),
        _Internal::time_request_sent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_Land_Request)
  return target;
}

size_t FlightCtrl_Land_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_Land_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_sent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_Land_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_Land_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_Land_Request::GetClassData() const { return &_class_data_; }


void FlightCtrl_Land_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_Land_Request*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_Land_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_Land_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_sent()) {
    _this->_internal_mutable_time_request_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_Land_Request::CopyFrom(const FlightCtrl_Land_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_Land_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_Land_Request::IsInitialized() const {
  return true;
}

void FlightCtrl_Land_Request::InternalSwap(FlightCtrl_Land_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_request_sent_, other->_impl_.time_request_sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_Land_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[42]);
}

// ===================================================================

class FlightCtrl_Land_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_received(const FlightCtrl_Land_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_response_sent(const FlightCtrl_Land_Response* msg);
  static const ::muas::NDNSF_Response& response(const FlightCtrl_Land_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Land_Response::_Internal::time_request_received(const FlightCtrl_Land_Response* msg) {
  return *msg->_impl_.time_request_received_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Land_Response::_Internal::time_response_sent(const FlightCtrl_Land_Response* msg) {
  return *msg->_impl_.time_response_sent_;
}
const ::muas::NDNSF_Response&
FlightCtrl_Land_Response::_Internal::response(const FlightCtrl_Land_Response* msg) {
  return *msg->_impl_.response_;
}
void FlightCtrl_Land_Response::clear_time_request_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
}
void FlightCtrl_Land_Response::clear_time_response_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
}
FlightCtrl_Land_Response::FlightCtrl_Land_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_Land_Response)
}
FlightCtrl_Land_Response::FlightCtrl_Land_Response(const FlightCtrl_Land_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_Land_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_received()) {
    _this->_impl_.time_request_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_received_);
  }
  if (from._internal_has_time_response_sent()) {
    _this->_impl_.time_response_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_response_sent_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_Land_Response)
}

inline void FlightCtrl_Land_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_Land_Response::~FlightCtrl_Land_Response() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_Land_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_Land_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_received_;
  if (this != internal_default_instance()) delete _impl_.time_response_sent_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void FlightCtrl_Land_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_Land_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_Land_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_Land_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_response_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_response_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.NDNSF_Response response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_Land_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_Land_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_received(this),
        _Internal::time_request_received(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_response_sent(this),
        _Internal::time_response_sent(this).GetCachedSize(), target, stream);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_Land_Response)
  return target;
}

size_t FlightCtrl_Land_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_Land_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_received_);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_response_sent_);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_Land_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_Land_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_Land_Response::GetClassData() const { return &_class_data_; }


void FlightCtrl_Land_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_Land_Response*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_Land_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_Land_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_received()) {
    _this->_internal_mutable_time_request_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_received());
  }
  if (from._internal_has_time_response_sent()) {
    _this->_internal_mutable_time_response_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_response_sent());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_Land_Response::CopyFrom(const FlightCtrl_Land_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_Land_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_Land_Response::IsInitialized() const {
  return true;
}

void FlightCtrl_Land_Response::InternalSwap(FlightCtrl_Land_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightCtrl_Land_Response, _impl_.response_)
      + sizeof(FlightCtrl_Land_Response::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(FlightCtrl_Land_Response, _impl_.time_request_received_)>(
          reinterpret_cast<char*>(&_impl_.time_request_received_),
          reinterpret_cast<char*>(&other->_impl_.time_request_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_Land_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[43]);
}

// ===================================================================

class FlightCtrl_RTL_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_sent(const FlightCtrl_RTL_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_RTL_Request::_Internal::time_request_sent(const FlightCtrl_RTL_Request* msg) {
  return *msg->_impl_.time_request_sent_;
}
void FlightCtrl_RTL_Request::clear_time_request_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
}
FlightCtrl_RTL_Request::FlightCtrl_RTL_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_RTL_Request)
}
FlightCtrl_RTL_Request::FlightCtrl_RTL_Request(const FlightCtrl_RTL_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_RTL_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_sent()) {
    _this->_impl_.time_request_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_sent_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_RTL_Request)
}

inline void FlightCtrl_RTL_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_RTL_Request::~FlightCtrl_RTL_Request() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_RTL_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_RTL_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_sent_;
}

void FlightCtrl_RTL_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_RTL_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_RTL_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_RTL_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_RTL_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_RTL_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_sent(this),
        _Internal::time_request_sent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_RTL_Request)
  return target;
}

size_t FlightCtrl_RTL_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_RTL_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_sent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_RTL_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_RTL_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_RTL_Request::GetClassData() const { return &_class_data_; }


void FlightCtrl_RTL_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_RTL_Request*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_RTL_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_RTL_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_sent()) {
    _this->_internal_mutable_time_request_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_RTL_Request::CopyFrom(const FlightCtrl_RTL_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_RTL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_RTL_Request::IsInitialized() const {
  return true;
}

void FlightCtrl_RTL_Request::InternalSwap(FlightCtrl_RTL_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_request_sent_, other->_impl_.time_request_sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_RTL_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[44]);
}

// ===================================================================

class FlightCtrl_RTL_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_received(const FlightCtrl_RTL_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_response_sent(const FlightCtrl_RTL_Response* msg);
  static const ::muas::NDNSF_Response& response(const FlightCtrl_RTL_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_RTL_Response::_Internal::time_request_received(const FlightCtrl_RTL_Response* msg) {
  return *msg->_impl_.time_request_received_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_RTL_Response::_Internal::time_response_sent(const FlightCtrl_RTL_Response* msg) {
  return *msg->_impl_.time_response_sent_;
}
const ::muas::NDNSF_Response&
FlightCtrl_RTL_Response::_Internal::response(const FlightCtrl_RTL_Response* msg) {
  return *msg->_impl_.response_;
}
void FlightCtrl_RTL_Response::clear_time_request_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
}
void FlightCtrl_RTL_Response::clear_time_response_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
}
FlightCtrl_RTL_Response::FlightCtrl_RTL_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_RTL_Response)
}
FlightCtrl_RTL_Response::FlightCtrl_RTL_Response(const FlightCtrl_RTL_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_RTL_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_received()) {
    _this->_impl_.time_request_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_received_);
  }
  if (from._internal_has_time_response_sent()) {
    _this->_impl_.time_response_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_response_sent_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_RTL_Response)
}

inline void FlightCtrl_RTL_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_RTL_Response::~FlightCtrl_RTL_Response() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_RTL_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_RTL_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_received_;
  if (this != internal_default_instance()) delete _impl_.time_response_sent_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void FlightCtrl_RTL_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_RTL_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_RTL_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_RTL_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_response_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_response_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.NDNSF_Response response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_RTL_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_RTL_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_received(this),
        _Internal::time_request_received(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_response_sent(this),
        _Internal::time_response_sent(this).GetCachedSize(), target, stream);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_RTL_Response)
  return target;
}

size_t FlightCtrl_RTL_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_RTL_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_received_);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_response_sent_);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_RTL_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_RTL_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_RTL_Response::GetClassData() const { return &_class_data_; }


void FlightCtrl_RTL_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_RTL_Response*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_RTL_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_RTL_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_received()) {
    _this->_internal_mutable_time_request_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_received());
  }
  if (from._internal_has_time_response_sent()) {
    _this->_internal_mutable_time_response_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_response_sent());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_RTL_Response::CopyFrom(const FlightCtrl_RTL_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_RTL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_RTL_Response::IsInitialized() const {
  return true;
}

void FlightCtrl_RTL_Response::InternalSwap(FlightCtrl_RTL_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightCtrl_RTL_Response, _impl_.response_)
      + sizeof(FlightCtrl_RTL_Response::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(FlightCtrl_RTL_Response, _impl_.time_request_received_)>(
          reinterpret_cast<char*>(&_impl_.time_request_received_),
          reinterpret_cast<char*>(&other->_impl_.time_request_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_RTL_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[45]);
}

// ===================================================================

class FlightCtrl_Kill_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_sent(const FlightCtrl_Kill_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Kill_Request::_Internal::time_request_sent(const FlightCtrl_Kill_Request* msg) {
  return *msg->_impl_.time_request_sent_;
}
void FlightCtrl_Kill_Request::clear_time_request_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
}
FlightCtrl_Kill_Request::FlightCtrl_Kill_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_Kill_Request)
}
FlightCtrl_Kill_Request::FlightCtrl_Kill_Request(const FlightCtrl_Kill_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_Kill_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_sent()) {
    _this->_impl_.time_request_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_sent_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_Kill_Request)
}

inline void FlightCtrl_Kill_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_Kill_Request::~FlightCtrl_Kill_Request() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_Kill_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_Kill_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_sent_;
}

void FlightCtrl_Kill_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_Kill_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_Kill_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_Kill_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_Kill_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_Kill_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_sent(this),
        _Internal::time_request_sent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_Kill_Request)
  return target;
}

size_t FlightCtrl_Kill_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_Kill_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_sent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_Kill_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_Kill_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_Kill_Request::GetClassData() const { return &_class_data_; }


void FlightCtrl_Kill_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_Kill_Request*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_Kill_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_Kill_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_sent()) {
    _this->_internal_mutable_time_request_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_Kill_Request::CopyFrom(const FlightCtrl_Kill_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_Kill_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_Kill_Request::IsInitialized() const {
  return true;
}

void FlightCtrl_Kill_Request::InternalSwap(FlightCtrl_Kill_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_request_sent_, other->_impl_.time_request_sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_Kill_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[46]);
}

// ===================================================================

class FlightCtrl_Kill_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_received(const FlightCtrl_Kill_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_response_sent(const FlightCtrl_Kill_Response* msg);
  static const ::muas::NDNSF_Response& response(const FlightCtrl_Kill_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Kill_Response::_Internal::time_request_received(const FlightCtrl_Kill_Response* msg) {
  return *msg->_impl_.time_request_received_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FlightCtrl_Kill_Response::_Internal::time_response_sent(const FlightCtrl_Kill_Response* msg) {
  return *msg->_impl_.time_response_sent_;
}
const ::muas::NDNSF_Response&
FlightCtrl_Kill_Response::_Internal::response(const FlightCtrl_Kill_Response* msg) {
  return *msg->_impl_.response_;
}
void FlightCtrl_Kill_Response::clear_time_request_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
}
void FlightCtrl_Kill_Response::clear_time_response_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
}
FlightCtrl_Kill_Response::FlightCtrl_Kill_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_Kill_Response)
}
FlightCtrl_Kill_Response::FlightCtrl_Kill_Response(const FlightCtrl_Kill_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_Kill_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_received()) {
    _this->_impl_.time_request_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_received_);
  }
  if (from._internal_has_time_response_sent()) {
    _this->_impl_.time_response_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_response_sent_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_Kill_Response)
}

inline void FlightCtrl_Kill_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_Kill_Response::~FlightCtrl_Kill_Response() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_Kill_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_Kill_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_received_;
  if (this != internal_default_instance()) delete _impl_.time_response_sent_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void FlightCtrl_Kill_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_Kill_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_Kill_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_Kill_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_response_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_response_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.NDNSF_Response response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_Kill_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_Kill_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_received(this),
        _Internal::time_request_received(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_response_sent(this),
        _Internal::time_response_sent(this).GetCachedSize(), target, stream);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_Kill_Response)
  return target;
}

size_t FlightCtrl_Kill_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_Kill_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_received_);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_response_sent_);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_Kill_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_Kill_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_Kill_Response::GetClassData() const { return &_class_data_; }


void FlightCtrl_Kill_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_Kill_Response*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_Kill_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_Kill_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_received()) {
    _this->_internal_mutable_time_request_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_received());
  }
  if (from._internal_has_time_response_sent()) {
    _this->_internal_mutable_time_response_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_response_sent());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_Kill_Response::CopyFrom(const FlightCtrl_Kill_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_Kill_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_Kill_Response::IsInitialized() const {
  return true;
}

void FlightCtrl_Kill_Response::InternalSwap(FlightCtrl_Kill_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightCtrl_Kill_Response, _impl_.response_)
      + sizeof(FlightCtrl_Kill_Response::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(FlightCtrl_Kill_Response, _impl_.time_request_received_)>(
          reinterpret_cast<char*>(&_impl_.time_request_received_),
          reinterpret_cast<char*>(&other->_impl_.time_request_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_Kill_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[47]);
}

// ===================================================================

class FlightCtrl_SetSpeed_Request::_Internal {
 public:
};

FlightCtrl_SetSpeed_Request::FlightCtrl_SetSpeed_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_SetSpeed_Request)
}
FlightCtrl_SetSpeed_Request::FlightCtrl_SetSpeed_Request(const FlightCtrl_SetSpeed_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_SetSpeed_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.speed_ = from._impl_.speed_;
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_SetSpeed_Request)
}

inline void FlightCtrl_SetSpeed_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_SetSpeed_Request::~FlightCtrl_SetSpeed_Request() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_SetSpeed_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_SetSpeed_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlightCtrl_SetSpeed_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_SetSpeed_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_SetSpeed_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_SetSpeed_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_SetSpeed_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_SetSpeed_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 speed = 1;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_SetSpeed_Request)
  return target;
}

size_t FlightCtrl_SetSpeed_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_SetSpeed_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 speed = 1;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_SetSpeed_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_SetSpeed_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_SetSpeed_Request::GetClassData() const { return &_class_data_; }


void FlightCtrl_SetSpeed_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_SetSpeed_Request*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_SetSpeed_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_SetSpeed_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_SetSpeed_Request::CopyFrom(const FlightCtrl_SetSpeed_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_SetSpeed_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_SetSpeed_Request::IsInitialized() const {
  return true;
}

void FlightCtrl_SetSpeed_Request::InternalSwap(FlightCtrl_SetSpeed_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.speed_, other->_impl_.speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_SetSpeed_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[48]);
}

// ===================================================================

class FlightCtrl_SetSpeed_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const FlightCtrl_SetSpeed_Response* msg);
};

const ::muas::NDNSF_Response&
FlightCtrl_SetSpeed_Response::_Internal::response(const FlightCtrl_SetSpeed_Response* msg) {
  return *msg->_impl_.response_;
}
FlightCtrl_SetSpeed_Response::FlightCtrl_SetSpeed_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_SetSpeed_Response)
}
FlightCtrl_SetSpeed_Response::FlightCtrl_SetSpeed_Response(const FlightCtrl_SetSpeed_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_SetSpeed_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_SetSpeed_Response)
}

inline void FlightCtrl_SetSpeed_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_SetSpeed_Response::~FlightCtrl_SetSpeed_Response() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_SetSpeed_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_SetSpeed_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void FlightCtrl_SetSpeed_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_SetSpeed_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_SetSpeed_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_SetSpeed_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_SetSpeed_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_SetSpeed_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_SetSpeed_Response)
  return target;
}

size_t FlightCtrl_SetSpeed_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_SetSpeed_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_SetSpeed_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_SetSpeed_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_SetSpeed_Response::GetClassData() const { return &_class_data_; }


void FlightCtrl_SetSpeed_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_SetSpeed_Response*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_SetSpeed_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_SetSpeed_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_SetSpeed_Response::CopyFrom(const FlightCtrl_SetSpeed_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_SetSpeed_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_SetSpeed_Response::IsInitialized() const {
  return true;
}

void FlightCtrl_SetSpeed_Response::InternalSwap(FlightCtrl_SetSpeed_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_SetSpeed_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[49]);
}

// ===================================================================

class FlightCtrl_Reposition_Request::_Internal {
 public:
  static const ::muas::Position& pos(const FlightCtrl_Reposition_Request* msg);
};

const ::muas::Position&
FlightCtrl_Reposition_Request::_Internal::pos(const FlightCtrl_Reposition_Request* msg) {
  return *msg->_impl_.pos_;
}
FlightCtrl_Reposition_Request::FlightCtrl_Reposition_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_Reposition_Request)
}
FlightCtrl_Reposition_Request::FlightCtrl_Reposition_Request(const FlightCtrl_Reposition_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_Reposition_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::muas::Position(*from._impl_.pos_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_Reposition_Request)
}

inline void FlightCtrl_Reposition_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_Reposition_Request::~FlightCtrl_Reposition_Request() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_Reposition_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_Reposition_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void FlightCtrl_Reposition_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_Reposition_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_Reposition_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_Reposition_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.Position pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_Reposition_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_Reposition_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.Position pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_Reposition_Request)
  return target;
}

size_t FlightCtrl_Reposition_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_Reposition_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.Position pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_Reposition_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_Reposition_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_Reposition_Request::GetClassData() const { return &_class_data_; }


void FlightCtrl_Reposition_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_Reposition_Request*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_Reposition_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_Reposition_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::muas::Position::MergeFrom(
        from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_Reposition_Request::CopyFrom(const FlightCtrl_Reposition_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_Reposition_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_Reposition_Request::IsInitialized() const {
  return true;
}

void FlightCtrl_Reposition_Request::InternalSwap(FlightCtrl_Reposition_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pos_, other->_impl_.pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_Reposition_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[50]);
}

// ===================================================================

class FlightCtrl_Reposition_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const FlightCtrl_Reposition_Response* msg);
};

const ::muas::NDNSF_Response&
FlightCtrl_Reposition_Response::_Internal::response(const FlightCtrl_Reposition_Response* msg) {
  return *msg->_impl_.response_;
}
FlightCtrl_Reposition_Response::FlightCtrl_Reposition_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.FlightCtrl_Reposition_Response)
}
FlightCtrl_Reposition_Response::FlightCtrl_Reposition_Response(const FlightCtrl_Reposition_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightCtrl_Reposition_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.FlightCtrl_Reposition_Response)
}

inline void FlightCtrl_Reposition_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightCtrl_Reposition_Response::~FlightCtrl_Reposition_Response() {
  // @@protoc_insertion_point(destructor:muas.FlightCtrl_Reposition_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightCtrl_Reposition_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}

void FlightCtrl_Reposition_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightCtrl_Reposition_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.FlightCtrl_Reposition_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCtrl_Reposition_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightCtrl_Reposition_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.FlightCtrl_Reposition_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.FlightCtrl_Reposition_Response)
  return target;
}

size_t FlightCtrl_Reposition_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.FlightCtrl_Reposition_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightCtrl_Reposition_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightCtrl_Reposition_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightCtrl_Reposition_Response::GetClassData() const { return &_class_data_; }


void FlightCtrl_Reposition_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightCtrl_Reposition_Response*>(&to_msg);
  auto& from = static_cast<const FlightCtrl_Reposition_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.FlightCtrl_Reposition_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightCtrl_Reposition_Response::CopyFrom(const FlightCtrl_Reposition_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.FlightCtrl_Reposition_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCtrl_Reposition_Response::IsInitialized() const {
  return true;
}

void FlightCtrl_Reposition_Response::InternalSwap(FlightCtrl_Reposition_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCtrl_Reposition_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[51]);
}

// ===================================================================

class MAVLink_Generic_Request::_Internal {
 public:
};

MAVLink_Generic_Request::MAVLink_Generic_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:muas.MAVLink_Generic_Request)
}
MAVLink_Generic_Request::MAVLink_Generic_Request(const MAVLink_Generic_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MAVLink_Generic_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:muas.MAVLink_Generic_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MAVLink_Generic_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MAVLink_Generic_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MAVLink_Generic_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[52]);
}

// ===================================================================

class MAVLink_Generic_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<MAVLink_Generic_Response>()._impl_._has_bits_);
  static const ::muas::NDNSF_Response& response(const MAVLink_Generic_Response* msg);
  static void set_has_mav_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::muas::NDNSF_Response&
MAVLink_Generic_Response::_Internal::response(const MAVLink_Generic_Response* msg) {
  return *msg->_impl_.response_;
}
MAVLink_Generic_Response::MAVLink_Generic_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.MAVLink_Generic_Response)
}
MAVLink_Generic_Response::MAVLink_Generic_Response(const MAVLink_Generic_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MAVLink_Generic_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mav_response_){}
    , decltype(_impl_.response_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mav_response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mav_response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mav_response()) {
    _this->_impl_.mav_response_.Set(from._internal_mav_response(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.MAVLink_Generic_Response)
}

inline void MAVLink_Generic_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mav_response_){}
    , decltype(_impl_.response_){nullptr}
  };
  _impl_.mav_response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mav_response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MAVLink_Generic_Response::~MAVLink_Generic_Response() {
  // @@protoc_insertion_point(destructor:muas.MAVLink_Generic_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MAVLink_Generic_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mav_response_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void MAVLink_Generic_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MAVLink_Generic_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.MAVLink_Generic_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mav_response_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MAVLink_Generic_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mav_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mav_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "muas.MAVLink_Generic_Response.mav_response"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MAVLink_Generic_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.MAVLink_Generic_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // optional string mav_response = 2;
  if (_internal_has_mav_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mav_response().data(), static_cast<int>(this->_internal_mav_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muas.MAVLink_Generic_Response.mav_response");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mav_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.MAVLink_Generic_Response)
  return target;
}

size_t MAVLink_Generic_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.MAVLink_Generic_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mav_response = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mav_response());
  }

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MAVLink_Generic_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MAVLink_Generic_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MAVLink_Generic_Response::GetClassData() const { return &_class_data_; }


void MAVLink_Generic_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MAVLink_Generic_Response*>(&to_msg);
  auto& from = static_cast<const MAVLink_Generic_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.MAVLink_Generic_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mav_response()) {
    _this->_internal_set_mav_response(from._internal_mav_response());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MAVLink_Generic_Response::CopyFrom(const MAVLink_Generic_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.MAVLink_Generic_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAVLink_Generic_Response::IsInitialized() const {
  return true;
}

void MAVLink_Generic_Response::InternalSwap(MAVLink_Generic_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mav_response_, lhs_arena,
      &other->_impl_.mav_response_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MAVLink_Generic_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[53]);
}

// ===================================================================

class SensorCtrl_GetSensorInfo_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_sent(const SensorCtrl_GetSensorInfo_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorCtrl_GetSensorInfo_Request::_Internal::time_request_sent(const SensorCtrl_GetSensorInfo_Request* msg) {
  return *msg->_impl_.time_request_sent_;
}
void SensorCtrl_GetSensorInfo_Request::clear_time_request_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
}
SensorCtrl_GetSensorInfo_Request::SensorCtrl_GetSensorInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.SensorCtrl_GetSensorInfo_Request)
}
SensorCtrl_GetSensorInfo_Request::SensorCtrl_GetSensorInfo_Request(const SensorCtrl_GetSensorInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorCtrl_GetSensorInfo_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_sent()) {
    _this->_impl_.time_request_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_sent_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.SensorCtrl_GetSensorInfo_Request)
}

inline void SensorCtrl_GetSensorInfo_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorCtrl_GetSensorInfo_Request::~SensorCtrl_GetSensorInfo_Request() {
  // @@protoc_insertion_point(destructor:muas.SensorCtrl_GetSensorInfo_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorCtrl_GetSensorInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_sent_;
}

void SensorCtrl_GetSensorInfo_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorCtrl_GetSensorInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.SensorCtrl_GetSensorInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorCtrl_GetSensorInfo_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorCtrl_GetSensorInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.SensorCtrl_GetSensorInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_sent(this),
        _Internal::time_request_sent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.SensorCtrl_GetSensorInfo_Request)
  return target;
}

size_t SensorCtrl_GetSensorInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.SensorCtrl_GetSensorInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_sent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorCtrl_GetSensorInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorCtrl_GetSensorInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorCtrl_GetSensorInfo_Request::GetClassData() const { return &_class_data_; }


void SensorCtrl_GetSensorInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorCtrl_GetSensorInfo_Request*>(&to_msg);
  auto& from = static_cast<const SensorCtrl_GetSensorInfo_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.SensorCtrl_GetSensorInfo_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_sent()) {
    _this->_internal_mutable_time_request_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorCtrl_GetSensorInfo_Request::CopyFrom(const SensorCtrl_GetSensorInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.SensorCtrl_GetSensorInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorCtrl_GetSensorInfo_Request::IsInitialized() const {
  return true;
}

void SensorCtrl_GetSensorInfo_Request::InternalSwap(SensorCtrl_GetSensorInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_request_sent_, other->_impl_.time_request_sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorCtrl_GetSensorInfo_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[54]);
}

// ===================================================================

class SensorCtrl_GetSensorInfo_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_received(const SensorCtrl_GetSensorInfo_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_response_sent(const SensorCtrl_GetSensorInfo_Response* msg);
  static const ::muas::NDNSF_Response& response(const SensorCtrl_GetSensorInfo_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorCtrl_GetSensorInfo_Response::_Internal::time_request_received(const SensorCtrl_GetSensorInfo_Response* msg) {
  return *msg->_impl_.time_request_received_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorCtrl_GetSensorInfo_Response::_Internal::time_response_sent(const SensorCtrl_GetSensorInfo_Response* msg) {
  return *msg->_impl_.time_response_sent_;
}
const ::muas::NDNSF_Response&
SensorCtrl_GetSensorInfo_Response::_Internal::response(const SensorCtrl_GetSensorInfo_Response* msg) {
  return *msg->_impl_.response_;
}
void SensorCtrl_GetSensorInfo_Response::clear_time_request_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
}
void SensorCtrl_GetSensorInfo_Response::clear_time_response_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
}
SensorCtrl_GetSensorInfo_Response::SensorCtrl_GetSensorInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.SensorCtrl_GetSensorInfo_Response)
}
SensorCtrl_GetSensorInfo_Response::SensorCtrl_GetSensorInfo_Response(const SensorCtrl_GetSensorInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorCtrl_GetSensorInfo_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sensors_){from._impl_.sensors_}
    , decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_received()) {
    _this->_impl_.time_request_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_received_);
  }
  if (from._internal_has_time_response_sent()) {
    _this->_impl_.time_response_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_response_sent_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.SensorCtrl_GetSensorInfo_Response)
}

inline void SensorCtrl_GetSensorInfo_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sensors_){arena}
    , decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorCtrl_GetSensorInfo_Response::~SensorCtrl_GetSensorInfo_Response() {
  // @@protoc_insertion_point(destructor:muas.SensorCtrl_GetSensorInfo_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorCtrl_GetSensorInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensors_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.time_request_received_;
  if (this != internal_default_instance()) delete _impl_.time_response_sent_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void SensorCtrl_GetSensorInfo_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorCtrl_GetSensorInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.SensorCtrl_GetSensorInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensors_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorCtrl_GetSensorInfo_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_response_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_response_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.NDNSF_Response response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .muas.Sensor sensors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorCtrl_GetSensorInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.SensorCtrl_GetSensorInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_received(this),
        _Internal::time_request_received(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_response_sent(this),
        _Internal::time_response_sent(this).GetCachedSize(), target, stream);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // repeated .muas.Sensor sensors = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.SensorCtrl_GetSensorInfo_Response)
  return target;
}

size_t SensorCtrl_GetSensorInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.SensorCtrl_GetSensorInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .muas.Sensor sensors = 4;
  total_size += 1UL * this->_internal_sensors_size();
  for (const auto& msg : this->_impl_.sensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_received_);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_response_sent_);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorCtrl_GetSensorInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorCtrl_GetSensorInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorCtrl_GetSensorInfo_Response::GetClassData() const { return &_class_data_; }


void SensorCtrl_GetSensorInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorCtrl_GetSensorInfo_Response*>(&to_msg);
  auto& from = static_cast<const SensorCtrl_GetSensorInfo_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.SensorCtrl_GetSensorInfo_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sensors_.MergeFrom(from._impl_.sensors_);
  if (from._internal_has_time_request_received()) {
    _this->_internal_mutable_time_request_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_received());
  }
  if (from._internal_has_time_response_sent()) {
    _this->_internal_mutable_time_response_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_response_sent());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorCtrl_GetSensorInfo_Response::CopyFrom(const SensorCtrl_GetSensorInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.SensorCtrl_GetSensorInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorCtrl_GetSensorInfo_Response::IsInitialized() const {
  return true;
}

void SensorCtrl_GetSensorInfo_Response::InternalSwap(SensorCtrl_GetSensorInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sensors_.InternalSwap(&other->_impl_.sensors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorCtrl_GetSensorInfo_Response, _impl_.response_)
      + sizeof(SensorCtrl_GetSensorInfo_Response::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(SensorCtrl_GetSensorInfo_Response, _impl_.time_request_received_)>(
          reinterpret_cast<char*>(&_impl_.time_request_received_),
          reinterpret_cast<char*>(&other->_impl_.time_request_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorCtrl_GetSensorInfo_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[55]);
}

// ===================================================================

class SensorCtrl_CaptureSingle_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_sent(const SensorCtrl_CaptureSingle_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorCtrl_CaptureSingle_Request::_Internal::time_request_sent(const SensorCtrl_CaptureSingle_Request* msg) {
  return *msg->_impl_.time_request_sent_;
}
void SensorCtrl_CaptureSingle_Request::clear_time_request_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
}
SensorCtrl_CaptureSingle_Request::SensorCtrl_CaptureSingle_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.SensorCtrl_CaptureSingle_Request)
}
SensorCtrl_CaptureSingle_Request::SensorCtrl_CaptureSingle_Request(const SensorCtrl_CaptureSingle_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorCtrl_CaptureSingle_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_request_sent()) {
    _this->_impl_.time_request_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_sent_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.SensorCtrl_CaptureSingle_Request)
}

inline void SensorCtrl_CaptureSingle_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_request_sent_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorCtrl_CaptureSingle_Request::~SensorCtrl_CaptureSingle_Request() {
  // @@protoc_insertion_point(destructor:muas.SensorCtrl_CaptureSingle_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorCtrl_CaptureSingle_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_request_sent_;
}

void SensorCtrl_CaptureSingle_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorCtrl_CaptureSingle_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.SensorCtrl_CaptureSingle_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_request_sent_ != nullptr) {
    delete _impl_.time_request_sent_;
  }
  _impl_.time_request_sent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorCtrl_CaptureSingle_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_sent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorCtrl_CaptureSingle_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.SensorCtrl_CaptureSingle_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_sent(this),
        _Internal::time_request_sent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.SensorCtrl_CaptureSingle_Request)
  return target;
}

size_t SensorCtrl_CaptureSingle_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.SensorCtrl_CaptureSingle_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_sent = 1;
  if (this->_internal_has_time_request_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_sent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorCtrl_CaptureSingle_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorCtrl_CaptureSingle_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorCtrl_CaptureSingle_Request::GetClassData() const { return &_class_data_; }


void SensorCtrl_CaptureSingle_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorCtrl_CaptureSingle_Request*>(&to_msg);
  auto& from = static_cast<const SensorCtrl_CaptureSingle_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.SensorCtrl_CaptureSingle_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_request_sent()) {
    _this->_internal_mutable_time_request_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorCtrl_CaptureSingle_Request::CopyFrom(const SensorCtrl_CaptureSingle_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.SensorCtrl_CaptureSingle_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorCtrl_CaptureSingle_Request::IsInitialized() const {
  return true;
}

void SensorCtrl_CaptureSingle_Request::InternalSwap(SensorCtrl_CaptureSingle_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_request_sent_, other->_impl_.time_request_sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorCtrl_CaptureSingle_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[56]);
}

// ===================================================================

class SensorCtrl_CaptureSingle_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_request_received(const SensorCtrl_CaptureSingle_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_response_sent(const SensorCtrl_CaptureSingle_Response* msg);
  static const ::muas::NDNSF_Response& response(const SensorCtrl_CaptureSingle_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorCtrl_CaptureSingle_Response::_Internal::time_request_received(const SensorCtrl_CaptureSingle_Response* msg) {
  return *msg->_impl_.time_request_received_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorCtrl_CaptureSingle_Response::_Internal::time_response_sent(const SensorCtrl_CaptureSingle_Response* msg) {
  return *msg->_impl_.time_response_sent_;
}
const ::muas::NDNSF_Response&
SensorCtrl_CaptureSingle_Response::_Internal::response(const SensorCtrl_CaptureSingle_Response* msg) {
  return *msg->_impl_.response_;
}
void SensorCtrl_CaptureSingle_Response::clear_time_request_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
}
void SensorCtrl_CaptureSingle_Response::clear_time_response_sent() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
}
SensorCtrl_CaptureSingle_Response::SensorCtrl_CaptureSingle_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.SensorCtrl_CaptureSingle_Response)
}
SensorCtrl_CaptureSingle_Response::SensorCtrl_CaptureSingle_Response(const SensorCtrl_CaptureSingle_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorCtrl_CaptureSingle_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.capture_id_){}
    , decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.capture_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.capture_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_capture_id().empty()) {
    _this->_impl_.capture_id_.Set(from._internal_capture_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time_request_received()) {
    _this->_impl_.time_request_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_request_received_);
  }
  if (from._internal_has_time_response_sent()) {
    _this->_impl_.time_response_sent_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_response_sent_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.SensorCtrl_CaptureSingle_Response)
}

inline void SensorCtrl_CaptureSingle_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.capture_id_){}
    , decltype(_impl_.time_request_received_){nullptr}
    , decltype(_impl_.time_response_sent_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.capture_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.capture_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SensorCtrl_CaptureSingle_Response::~SensorCtrl_CaptureSingle_Response() {
  // @@protoc_insertion_point(destructor:muas.SensorCtrl_CaptureSingle_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorCtrl_CaptureSingle_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.capture_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_request_received_;
  if (this != internal_default_instance()) delete _impl_.time_response_sent_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void SensorCtrl_CaptureSingle_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorCtrl_CaptureSingle_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.SensorCtrl_CaptureSingle_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.capture_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_request_received_ != nullptr) {
    delete _impl_.time_request_received_;
  }
  _impl_.time_request_received_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_response_sent_ != nullptr) {
    delete _impl_.time_response_sent_;
  }
  _impl_.time_response_sent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorCtrl_CaptureSingle_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_request_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_request_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_response_sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_response_sent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .muas.NDNSF_Response response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string capture_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_capture_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "muas.SensorCtrl_CaptureSingle_Response.capture_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorCtrl_CaptureSingle_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.SensorCtrl_CaptureSingle_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_request_received(this),
        _Internal::time_request_received(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_response_sent(this),
        _Internal::time_response_sent(this).GetCachedSize(), target, stream);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // string capture_id = 4;
  if (!this->_internal_capture_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_capture_id().data(), static_cast<int>(this->_internal_capture_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muas.SensorCtrl_CaptureSingle_Response.capture_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_capture_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.SensorCtrl_CaptureSingle_Response)
  return target;
}

size_t SensorCtrl_CaptureSingle_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.SensorCtrl_CaptureSingle_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string capture_id = 4;
  if (!this->_internal_capture_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_capture_id());
  }

  // .google.protobuf.Timestamp time_request_received = 1;
  if (this->_internal_has_time_request_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_request_received_);
  }

  // .google.protobuf.Timestamp time_response_sent = 2;
  if (this->_internal_has_time_response_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_response_sent_);
  }

  // .muas.NDNSF_Response response = 3;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorCtrl_CaptureSingle_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorCtrl_CaptureSingle_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorCtrl_CaptureSingle_Response::GetClassData() const { return &_class_data_; }


void SensorCtrl_CaptureSingle_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorCtrl_CaptureSingle_Response*>(&to_msg);
  auto& from = static_cast<const SensorCtrl_CaptureSingle_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.SensorCtrl_CaptureSingle_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_capture_id().empty()) {
    _this->_internal_set_capture_id(from._internal_capture_id());
  }
  if (from._internal_has_time_request_received()) {
    _this->_internal_mutable_time_request_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_request_received());
  }
  if (from._internal_has_time_response_sent()) {
    _this->_internal_mutable_time_response_sent()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_response_sent());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorCtrl_CaptureSingle_Response::CopyFrom(const SensorCtrl_CaptureSingle_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.SensorCtrl_CaptureSingle_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorCtrl_CaptureSingle_Response::IsInitialized() const {
  return true;
}

void SensorCtrl_CaptureSingle_Response::InternalSwap(SensorCtrl_CaptureSingle_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.capture_id_, lhs_arena,
      &other->_impl_.capture_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorCtrl_CaptureSingle_Response, _impl_.response_)
      + sizeof(SensorCtrl_CaptureSingle_Response::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(SensorCtrl_CaptureSingle_Response, _impl_.time_request_received_)>(
          reinterpret_cast<char*>(&_impl_.time_request_received_),
          reinterpret_cast<char*>(&other->_impl_.time_request_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorCtrl_CaptureSingle_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[57]);
}

// ===================================================================

class SensorCtrl_CapturePeriodic_Request::_Internal {
 public:
};

SensorCtrl_CapturePeriodic_Request::SensorCtrl_CapturePeriodic_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.SensorCtrl_CapturePeriodic_Request)
}
SensorCtrl_CapturePeriodic_Request::SensorCtrl_CapturePeriodic_Request(const SensorCtrl_CapturePeriodic_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorCtrl_CapturePeriodic_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interval_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.interval_sec_ = from._impl_.interval_sec_;
  // @@protoc_insertion_point(copy_constructor:muas.SensorCtrl_CapturePeriodic_Request)
}

inline void SensorCtrl_CapturePeriodic_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interval_sec_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorCtrl_CapturePeriodic_Request::~SensorCtrl_CapturePeriodic_Request() {
  // @@protoc_insertion_point(destructor:muas.SensorCtrl_CapturePeriodic_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorCtrl_CapturePeriodic_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorCtrl_CapturePeriodic_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorCtrl_CapturePeriodic_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.SensorCtrl_CapturePeriodic_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interval_sec_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorCtrl_CapturePeriodic_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 interval_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.interval_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorCtrl_CapturePeriodic_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.SensorCtrl_CapturePeriodic_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 interval_sec = 1;
  if (this->_internal_interval_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_interval_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.SensorCtrl_CapturePeriodic_Request)
  return target;
}

size_t SensorCtrl_CapturePeriodic_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.SensorCtrl_CapturePeriodic_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 interval_sec = 1;
  if (this->_internal_interval_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_interval_sec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorCtrl_CapturePeriodic_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorCtrl_CapturePeriodic_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorCtrl_CapturePeriodic_Request::GetClassData() const { return &_class_data_; }


void SensorCtrl_CapturePeriodic_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorCtrl_CapturePeriodic_Request*>(&to_msg);
  auto& from = static_cast<const SensorCtrl_CapturePeriodic_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.SensorCtrl_CapturePeriodic_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_interval_sec() != 0) {
    _this->_internal_set_interval_sec(from._internal_interval_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorCtrl_CapturePeriodic_Request::CopyFrom(const SensorCtrl_CapturePeriodic_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.SensorCtrl_CapturePeriodic_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorCtrl_CapturePeriodic_Request::IsInitialized() const {
  return true;
}

void SensorCtrl_CapturePeriodic_Request::InternalSwap(SensorCtrl_CapturePeriodic_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.interval_sec_, other->_impl_.interval_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorCtrl_CapturePeriodic_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[58]);
}

// ===================================================================

class SensorCtrl_CapturePeriodic_Response::_Internal {
 public:
  static const ::muas::NDNSF_Response& response(const SensorCtrl_CapturePeriodic_Response* msg);
};

const ::muas::NDNSF_Response&
SensorCtrl_CapturePeriodic_Response::_Internal::response(const SensorCtrl_CapturePeriodic_Response* msg) {
  return *msg->_impl_.response_;
}
SensorCtrl_CapturePeriodic_Response::SensorCtrl_CapturePeriodic_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:muas.SensorCtrl_CapturePeriodic_Response)
}
SensorCtrl_CapturePeriodic_Response::SensorCtrl_CapturePeriodic_Response(const SensorCtrl_CapturePeriodic_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorCtrl_CapturePeriodic_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.capture_id_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.capture_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.capture_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_capture_id().empty()) {
    _this->_impl_.capture_id_.Set(from._internal_capture_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::muas::NDNSF_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:muas.SensorCtrl_CapturePeriodic_Response)
}

inline void SensorCtrl_CapturePeriodic_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.capture_id_){}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.capture_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.capture_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SensorCtrl_CapturePeriodic_Response::~SensorCtrl_CapturePeriodic_Response() {
  // @@protoc_insertion_point(destructor:muas.SensorCtrl_CapturePeriodic_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorCtrl_CapturePeriodic_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.capture_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void SensorCtrl_CapturePeriodic_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorCtrl_CapturePeriodic_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:muas.SensorCtrl_CapturePeriodic_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.capture_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorCtrl_CapturePeriodic_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muas.NDNSF_Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string capture_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_capture_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "muas.SensorCtrl_CapturePeriodic_Response.capture_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorCtrl_CapturePeriodic_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muas.SensorCtrl_CapturePeriodic_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // string capture_id = 2;
  if (!this->_internal_capture_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_capture_id().data(), static_cast<int>(this->_internal_capture_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muas.SensorCtrl_CapturePeriodic_Response.capture_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_capture_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muas.SensorCtrl_CapturePeriodic_Response)
  return target;
}

size_t SensorCtrl_CapturePeriodic_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muas.SensorCtrl_CapturePeriodic_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string capture_id = 2;
  if (!this->_internal_capture_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_capture_id());
  }

  // .muas.NDNSF_Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorCtrl_CapturePeriodic_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorCtrl_CapturePeriodic_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorCtrl_CapturePeriodic_Response::GetClassData() const { return &_class_data_; }


void SensorCtrl_CapturePeriodic_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorCtrl_CapturePeriodic_Response*>(&to_msg);
  auto& from = static_cast<const SensorCtrl_CapturePeriodic_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muas.SensorCtrl_CapturePeriodic_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_capture_id().empty()) {
    _this->_internal_set_capture_id(from._internal_capture_id());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::muas::NDNSF_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorCtrl_CapturePeriodic_Response::CopyFrom(const SensorCtrl_CapturePeriodic_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muas.SensorCtrl_CapturePeriodic_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorCtrl_CapturePeriodic_Response::IsInitialized() const {
  return true;
}

void SensorCtrl_CapturePeriodic_Response::InternalSwap(SensorCtrl_CapturePeriodic_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.capture_id_, lhs_arena,
      &other->_impl_.capture_id_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorCtrl_CapturePeriodic_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[59]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace muas
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::muas::Position*
Arena::CreateMaybeMessage< ::muas::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Orientation*
Arena::CreateMaybeMessage< ::muas::Orientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::MissionItem*
Arena::CreateMaybeMessage< ::muas::MissionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::MissionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::MissionInfo*
Arena::CreateMaybeMessage< ::muas::MissionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::MissionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Sensor*
Arena::CreateMaybeMessage< ::muas::Sensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Sensor >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::NDNSF_Response*
Arena::CreateMaybeMessage< ::muas::NDNSF_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::NDNSF_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Entity_Echo_Request*
Arena::CreateMaybeMessage< ::muas::Entity_Echo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Entity_Echo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Entity_Echo_Response*
Arena::CreateMaybeMessage< ::muas::Entity_Echo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Entity_Echo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Entity_GetEntityInfo_Request*
Arena::CreateMaybeMessage< ::muas::Entity_GetEntityInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Entity_GetEntityInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Entity_GetEntityInfo_Response*
Arena::CreateMaybeMessage< ::muas::Entity_GetEntityInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Entity_GetEntityInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Entity_GetPosition_Request*
Arena::CreateMaybeMessage< ::muas::Entity_GetPosition_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Entity_GetPosition_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Entity_GetPosition_Response*
Arena::CreateMaybeMessage< ::muas::Entity_GetPosition_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Entity_GetPosition_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Entity_GetOrientation_Request*
Arena::CreateMaybeMessage< ::muas::Entity_GetOrientation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Entity_GetOrientation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Entity_GetOrientation_Response*
Arena::CreateMaybeMessage< ::muas::Entity_GetOrientation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Entity_GetOrientation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Admin_Test_Request*
Arena::CreateMaybeMessage< ::muas::Admin_Test_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Admin_Test_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Admin_Test_Response*
Arena::CreateMaybeMessage< ::muas::Admin_Test_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Admin_Test_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::WUAS_QuadRaster_Request*
Arena::CreateMaybeMessage< ::muas::WUAS_QuadRaster_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::WUAS_QuadRaster_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::WUAS_QuadRaster_Response*
Arena::CreateMaybeMessage< ::muas::WUAS_QuadRaster_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::WUAS_QuadRaster_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::IUAS_PointOrbit_Request*
Arena::CreateMaybeMessage< ::muas::IUAS_PointOrbit_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::IUAS_PointOrbit_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::IUAS_PointOrbit_Response*
Arena::CreateMaybeMessage< ::muas::IUAS_PointOrbit_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::IUAS_PointOrbit_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::IUAS_PointHover_Request*
Arena::CreateMaybeMessage< ::muas::IUAS_PointHover_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::IUAS_PointHover_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::IUAS_PointHover_Response*
Arena::CreateMaybeMessage< ::muas::IUAS_PointHover_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::IUAS_PointHover_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_GetMissionInfo_Request*
Arena::CreateMaybeMessage< ::muas::Mission_GetMissionInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_GetMissionInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_GetMissionInfo_Response*
Arena::CreateMaybeMessage< ::muas::Mission_GetMissionInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_GetMissionInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_GetItem_Request*
Arena::CreateMaybeMessage< ::muas::Mission_GetItem_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_GetItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_GetItem_Response*
Arena::CreateMaybeMessage< ::muas::Mission_GetItem_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_GetItem_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_SetItem_Request*
Arena::CreateMaybeMessage< ::muas::Mission_SetItem_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_SetItem_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_SetItem_Response*
Arena::CreateMaybeMessage< ::muas::Mission_SetItem_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_SetItem_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Clear_Request*
Arena::CreateMaybeMessage< ::muas::Mission_Clear_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Clear_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Clear_Response*
Arena::CreateMaybeMessage< ::muas::Mission_Clear_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Clear_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Start_Request*
Arena::CreateMaybeMessage< ::muas::Mission_Start_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Start_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Start_Response*
Arena::CreateMaybeMessage< ::muas::Mission_Start_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Start_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Pause_Request*
Arena::CreateMaybeMessage< ::muas::Mission_Pause_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Pause_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Pause_Response*
Arena::CreateMaybeMessage< ::muas::Mission_Pause_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Pause_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Continue_Request*
Arena::CreateMaybeMessage< ::muas::Mission_Continue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Continue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Continue_Response*
Arena::CreateMaybeMessage< ::muas::Mission_Continue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Continue_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Terminate_Request*
Arena::CreateMaybeMessage< ::muas::Mission_Terminate_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Terminate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::Mission_Terminate_Response*
Arena::CreateMaybeMessage< ::muas::Mission_Terminate_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::Mission_Terminate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_SwitchMode_Request*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_SwitchMode_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_SwitchMode_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_SwitchMode_Response*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_SwitchMode_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_SwitchMode_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_Takeoff_Request*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_Takeoff_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_Takeoff_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_Takeoff_Response*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_Takeoff_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_Takeoff_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_Land_Request*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_Land_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_Land_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_Land_Response*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_Land_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_Land_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_RTL_Request*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_RTL_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_RTL_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_RTL_Response*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_RTL_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_RTL_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_Kill_Request*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_Kill_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_Kill_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_Kill_Response*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_Kill_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_Kill_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_SetSpeed_Request*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_SetSpeed_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_SetSpeed_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_SetSpeed_Response*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_SetSpeed_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_SetSpeed_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_Reposition_Request*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_Reposition_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_Reposition_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::FlightCtrl_Reposition_Response*
Arena::CreateMaybeMessage< ::muas::FlightCtrl_Reposition_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::FlightCtrl_Reposition_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::MAVLink_Generic_Request*
Arena::CreateMaybeMessage< ::muas::MAVLink_Generic_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::MAVLink_Generic_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::MAVLink_Generic_Response*
Arena::CreateMaybeMessage< ::muas::MAVLink_Generic_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::MAVLink_Generic_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::SensorCtrl_GetSensorInfo_Request*
Arena::CreateMaybeMessage< ::muas::SensorCtrl_GetSensorInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::SensorCtrl_GetSensorInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::SensorCtrl_GetSensorInfo_Response*
Arena::CreateMaybeMessage< ::muas::SensorCtrl_GetSensorInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::SensorCtrl_GetSensorInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::SensorCtrl_CaptureSingle_Request*
Arena::CreateMaybeMessage< ::muas::SensorCtrl_CaptureSingle_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::SensorCtrl_CaptureSingle_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::SensorCtrl_CaptureSingle_Response*
Arena::CreateMaybeMessage< ::muas::SensorCtrl_CaptureSingle_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::SensorCtrl_CaptureSingle_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::SensorCtrl_CapturePeriodic_Request*
Arena::CreateMaybeMessage< ::muas::SensorCtrl_CapturePeriodic_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::SensorCtrl_CapturePeriodic_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::muas::SensorCtrl_CapturePeriodic_Response*
Arena::CreateMaybeMessage< ::muas::SensorCtrl_CapturePeriodic_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muas::SensorCtrl_CapturePeriodic_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

syntax = "proto3";
package muas;
enum EntityType { ALL = 0; GCS = 1; UAS = 2; IUAS = 3; WUAS = 4; } enum MAV_MSG { UNKNOWN_MSG = 0; HEARTBEAT = 1; SYS_STATUS = 2; SYSTEM_TIME = 3; GPS_RAW_INT = 4; GPS_STATUS = 5; SCALED_IMU = 6; RAW_IMU = 7; RAW_PRESSURE = 8; SCALED_PRESSURE = 9; ATTITUDE = 10; ATTITUDE_QUATERNION = 11; LOCAL_POSITION_NED = 12; GLOBAL_POSITION_INT = 13; } message Position { float latitude = 1; float longitude = 2; float altitude = 3; } message Orientation { float yaw = 1; float pitch = 2; float roll = 3; } message MissionItem { enum Frame { UNKNOWN_FRAME = 0; GLOBAL = 1; RELATIVE_ALT = 2; TERRAIN_ALT = 3; INT = 4; }
enum MAV_CMD { UNKNOWN_CMD = 0; NAV_WAYPOINT = 1; NAV_RETURN_TO_LAUNCH = 2; NAV_LAND = 3; NAV_TAKEOFF = 4; NAV_LAND_LOCAL = 5; NAV_TAKEOFF_LOCAL = 6; DO_FOLLOW = 7; DO_FOLLOW_REPOSITION = 8; DO_ORBIT = 9; DO_FLIGHTTERMINATION = 10; DO_CHANGE_ALTITUDE = 11; DO_RETURN_PATH_START = 12; DO_LAND_START = 13; DO_RALLY_LAND = 14; DO_GO_AROUND = 15; DO_REPOSITION = 16; DO_PAUSE_CONTINUE = 17; }
int32 target_sys = 1; int32 target_comp = 2; int32 seq = 3; Frame frame = 4; MAV_CMD cmd = 5; bool current = 6; bool autocontinue = 7; float param1 = 8; float param2 = 9; float param3 = 10; float param4 = 11; int32 x = 12; int32 y = 13; int32 z = 14; } message MissionInfo { int32 num_items = 1; } message Sensor { enum SensorType { UNKNOWN_SENSOR = 0; MULTISPECTRAL = 1; HYPERSPECTRAL = 2; ACOUSTIC = 3; MAGNETIC = 4; }
string name = 1; int32 id = 2; SensorType type = 3; string data_namespace = 4; } message NDNSF_Response { enum miniMUAS_Code { UNKNOWN_CODE = 0; SUCCESS = 1; ERROR = 2; } miniMUAS_Code code = 1; optional string msg = 2; }
message Entity_Echo_Request { string nonce = 1; } message Entity_Echo_Response { string nonce = 1; } message Entity_GetEntityInfo_Request { NDNSF_Response response = 1; int32 key = 2; } message Entity_GetEntityInfo_Response { NDNSF_Response response = 1; string value = 2; } message Entity_GetPosition_Request {} message Entity_GetPosition_Response { NDNSF_Response response = 1; Position pos = 2; } message Entity_GetOrientation_Request {} message Entity_GetOrientation_Response { NDNSF_Response response = 1; Orientation attitude = 2; }
message Admin_Test_Request {} message Admin_Test_Response { NDNSF_Response response = 1; string reply = 2; }
message WUAS_QuadRaster_Request { Position nw_coord = 1; Position se_coord = 2; float alt = 3; int32 passes = 4; } message WUAS_QuadRaster_Response { NDNSF_Response response = 1; }
message IUAS_PointOrbit_Request { Position target = 1; } message IUAS_PointOrbit_Response { NDNSF_Response response = 1; } message IUAS_PointHover_Request { Position pos = 1; } message IUAS_PointHover_Response { NDNSF_Response response = 1; }
message Mission_GetMissionInfo_Request {} message Mission_GetMissionInfo_Response { NDNSF_Response response = 1; MissionInfo info = 2; } message Mission_GetItem_Request { int32 idx = 1; } message Mission_GetItem_Response { NDNSF_Response response = 1; MissionItem item = 2; } message Mission_SetItem_Request { int32 idx = 1; MissionItem item = 2; } message Mission_SetItem_Response { NDNSF_Response response = 1; } message Mission_Clear_Request {} message Mission_Clear_Response { NDNSF_Response response = 1; } message Mission_Start_Request {} message Mission_Start_Response { NDNSF_Response response = 1; } message Mission_Pause_Request {} message Mission_Pause_Response { NDNSF_Response response = 1; } message Mission_Continue_Request {} message Mission_Continue_Response { NDNSF_Response response = 1; } message Mission_Terminate_Request {} message Mission_Terminate_Response { NDNSF_Response response = 1; }
message FlightCtrl_SwitchMode_Request { enum FlightMode { UNKNOWN = 0; STABILIZE = 1; ALT_HOLD = 2; LOITER = 3; GUIDED = 4; }
FlightMode mode = 1; } message FlightCtrl_SwitchMode_Response { NDNSF_Response response = 1; } message FlightCtrl_Takeoff_Request {} message FlightCtrl_Takeoff_Response { NDNSF_Response response = 1; } message FlightCtrl_Land_Request {} message FlightCtrl_Land_Response { NDNSF_Response response = 1; } message FlightCtrl_RTL_Request {} message FlightCtrl_RTL_Response { NDNSF_Response response = 1; } message FlightCtrl_Kill_Request {} message FlightCtrl_Kill_Response { NDNSF_Response response = 1; } message FlightCtrl_SetSpeed_Request { int32 speed = 1; } message FlightCtrl_SetSpeed_Response { NDNSF_Response response = 1; } message FlightCtrl_Reposition_Request { Position pos = 1; } message FlightCtrl_Reposition_Response { NDNSF_Response response = 1; }
message MAVLink_Generic_Request {} message MAVLink_Generic_Response { NDNSF_Response response = 1; optional string mav_response = 2; }
message SensorCtrl_GetSensorInfo_Request {} message SensorCtrl_GetSensorInfo_Response { NDNSF_Response response = 1; repeated Sensor sensors = 2; } message SensorCtrl_CaptureSingle_Request {} message SensorCtrl_CaptureSingle_Response { NDNSF_Response response = 1; string capture_id = 2; } message SensorCtrl_CapturePeriodic_Request { int32 interval_sec = 1; } message SensorCtrl_CapturePeriodic_Response { NDNSF_Response response = 1; string capture_id = 2; }